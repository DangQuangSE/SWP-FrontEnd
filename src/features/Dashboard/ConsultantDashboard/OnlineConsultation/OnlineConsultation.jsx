import React, { useState, useEffect, useCallback } from "react";
import {
  Card,
  Button,
  Table,
  Tag,
  message,
  DatePicker,
  Tabs,
  Space,
  Modal,
  Form,
  Input,
  Row,
  Col,
} from "antd";
import {
  SolutionOutlined,
  VideoCameraOutlined,
  UserOutlined,
  CalendarOutlined,
  CheckCircleOutlined,
  ClockCircleOutlined,
  ExclamationCircleOutlined,
  EditOutlined,
  FileTextOutlined,
  CloseCircleOutlined,
  QuestionCircleOutlined,
} from "@ant-design/icons";

import dayjs from "dayjs";
import { toast } from "react-toastify";
import {
  updateAppointmentDetailStatus,
  getMySchedule,
} from "../../../../api/consultantAPI";
import MedicalResultViewer from "../../../../components/MedicalResult/MedicalResultViewer";
import MedicalResultForm from "../../../../components/MedicalResult/MedicalResultForm";
import PatientDetailButton from "../PatientHistory/PatientDetailButton";
import "./OnlineConsultation.css";

const OnlineConsultation = ({ setIsConsultationModalVisible, userId }) => {
  // State ƒë·ªÉ l∆∞u d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l·ªçc theo ng√†y theo t·ª´ng tab
  const [tabsData, setTabsData] = useState({
    CONFIRMED: [], // ƒê√£ x√°c nh·∫≠n - s·∫µn s√†ng t∆∞ v·∫•n
    IN_PROGRESS: [], // ƒêang t∆∞ v·∫•n
    WAITING_RESULT: [], // Ch·ªù k·∫øt qu·∫£
    COMPLETED: [], // Ho√†n th√†nh
  });

  // State ƒë·ªÉ hi·ªÉn th·ªã loading khi ƒëang t·∫£i d·ªØ li·ªáu
  const [isLoadingData, setIsLoadingData] = useState(false);

  // State ƒë·ªÉ l∆∞u ng√†y ƒë∆∞·ª£c ch·ªçn (m·∫∑c ƒë·ªãnh l√† h√¥m nay)
  const [currentSelectedDate, setCurrentSelectedDate] = useState(new Date());

  // State ƒë·ªÉ qu·∫£n l√Ω tab hi·ªán t·∫°i
  const [activeTab, setActiveTab] = useState("confirmed");

  // State cho modal nh·∫≠p k·∫øt qu·∫£ kh√°m
  const [isResultModalVisible, setIsResultModalVisible] = useState(false);
  const [selectedAppointmentDetail, setSelectedAppointmentDetail] =
    useState(null);

  // Form cho modal t∆∞ v·∫•n
  const [consultForm] = Form.useForm();

  // H√†m ƒë·ªÉ l·∫•y d·ªØ li·ªáu t∆∞ v·∫•n tr·ª±c tuy·∫øn theo status (gi·ªëng PersonalSchedule)
  const loadAppointmentsByStatus = async (date, status) => {
    try {
      console.log(`üì° [API] Loading ${status} appointments for ${date}`);

      const response = await getMySchedule(date, status);
      const appointments = response.data || [];

      // L·ªçc ch·ªâ l·∫•y nh·ªØng cu·ªôc h·∫πn t∆∞ v·∫•n tr·ª±c tuy·∫øn c√≥ startUrl
      const onlineConsultationData = appointments.filter(
        (singleAppointment) => {
          // Ki·ªÉm tra xem c√≥ ph·∫£i l√† t∆∞ v·∫•n tr·ª±c tuy·∫øn kh√¥ng
          const isOnlineConsultation =
            singleAppointment.serviceType === "CONSULTING_ON";

          // Ki·ªÉm tra xem c√≥ startUrl ƒë·ªÉ b·∫Øt ƒë·∫ßu t∆∞ v·∫•n kh√¥ng
          const hasStartUrl = singleAppointment.appointmentDetails?.some(
            (detail) => detail.startUrl
          );

          // Ch·ªâ l·∫•y nh·ªØng cu·ªôc h·∫πn v·ª´a l√† t∆∞ v·∫•n tr·ª±c tuy·∫øn v·ª´a c√≥ startUrl
          return isOnlineConsultation && hasStartUrl;
        }
      );

      console.log(
        ` [API] Loaded ${onlineConsultationData.length} ${status} online consultations`
      );

      // C·∫≠p nh·∫≠t state cho tab c·ª• th·ªÉ
      setTabsData((prev) => ({
        ...prev,
        [status]: onlineConsultationData,
      }));

      return onlineConsultationData;
    } catch (error) {
      console.error(` Error loading ${status} appointments:`, error);
      message.error(`Kh√¥ng th·ªÉ t·∫£i danh s√°ch ${status}`);
      return [];
    }
  };

  // H√†m ƒë·ªÉ t·∫£i t·∫•t c·∫£ tabs (gi·ªëng PersonalSchedule)
  const loadAllTabsData = async (targetDate) => {
    setIsLoadingData(true);

    try {
      const statuses = [
        "CONFIRMED",
        "IN_PROGRESS",
        "WAITING_RESULT",
        "COMPLETED",
      ];

      // Load all statuses in parallel
      const promises = statuses.map((status) => {
        console.log(`üì° [API_CALL] Loading ${status} for ${targetDate}`);
        return loadAppointmentsByStatus(targetDate, status);
      });

      const results = await Promise.allSettled(promises);

      // Log results
      results.forEach((result, index) => {
        const status = statuses[index];
        if (result.status === "fulfilled") {
          console.log(
            ` [PARALLEL] ${status}: ${result.value.length} appointments`
          );
        } else {
          console.error(` [PARALLEL] ${status} failed:`, result.reason);
        }
      });

      const successCount = results.filter(
        (r) => r.status === "fulfilled"
      ).length;
      toast.success(`ƒê√£ t·∫£i ${successCount}/${statuses.length} tab th√†nh c√¥ng`);
    } catch (error) {
      console.error(" Error loading all tabs data:", error);
      toast.error("L·ªói khi t·∫£i d·ªØ li·ªáu");
    } finally {
      setIsLoadingData(false);
    }
  };

  // useEffect ch·∫°y khi component ƒë∆∞·ª£c mount (hi·ªÉn th·ªã l·∫ßn ƒë·∫ßu) ho·∫∑c khi userId thay ƒë·ªïi
  useEffect(() => {
    // Ch·ªâ g·ªçi API khi c√≥ userId
    if (userId) {
      const today = dayjs().format("YYYY-MM-DD");
      loadAllTabsData(today);
    }
  }, [userId]); // Ch·∫°y l·∫°i khi userId thay ƒë·ªïi

  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng thay ƒë·ªïi ng√†y trong DatePicker
  const handleDatePickerChange = (newSelectedDate) => {
    // N·∫øu ng∆∞·ªùi d√πng kh√¥ng ch·ªçn ng√†y n√†o, s·ª≠ d·ª•ng ng√†y h√¥m nay
    const dateToUse = newSelectedDate || dayjs();

    // Chuy·ªÉn t·ª´ dayjs object th√†nh JavaScript Date object
    const javascriptDateObject = dateToUse.toDate();
    const dateString = dateToUse.format("YYYY-MM-DD");

    // C·∫≠p nh·∫≠t state v·ªõi ng√†y m·ªõi ƒë∆∞·ª£c ch·ªçn
    setCurrentSelectedDate(javascriptDateObject);

    // Load l·∫°i t·∫•t c·∫£ tabs cho ng√†y m·ªõi
    loadAllTabsData(dateString);
  };

  // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi tab
  const handleTabChange = (newActiveTab) => {
    setActiveTab(newActiveTab);
  };

  // H√†m l·∫•y d·ªØ li·ªáu cho tab hi·ªán t·∫°i
  const getCurrentTabData = () => {
    const statusMapping = {
      confirmed: "CONFIRMED",
      in_progress: "IN_PROGRESS",
      waiting_result: "WAITING_RESULT",
      completed: "COMPLETED",
    };

    const currentStatus = statusMapping[activeTab] || "CONFIRMED";
    return tabsData[currentStatus] || [];
  };

  // H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i appointment detail v·ªõi confirmation (gi·ªëng PersonalSchedule)
  const handleStatusUpdate = async (detailId, newStatus, confirmMessage) => {
    try {
      const confirmed = await new Promise((resolve) => {
        Modal.confirm({
          title: "X√°c nh·∫≠n thay ƒë·ªïi tr·∫°ng th√°i",
          content: confirmMessage,
          okText: "X√°c nh·∫≠n",
          cancelText: "H·ªßy",
          onOk: () => resolve(true),
          onCancel: () => resolve(false),
        });
      });

      if (!confirmed) return;

      console.log(" Updating appointment detail status:", {
        appointmentDetailId: detailId,
        newStatus: newStatus,
      });

      const response = await updateAppointmentDetailStatus(detailId, newStatus);
      console.log(" Status update response:", response);

      toast.success(`C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng: ${newStatus}`);

      // Smart refetch: Reload d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t UI (gi·ªëng PersonalSchedule)
      const date = dayjs(currentSelectedDate).format("YYYY-MM-DD");
      console.log(" Reloading data after status update...");

      // Reload both current status and new status tabs
      const statusMapping = {
        confirmed: "CONFIRMED",
        in_progress: "IN_PROGRESS",
        waiting_result: "WAITING_RESULT",
        completed: "COMPLETED",
      };
      const currentStatus = statusMapping[activeTab] || "CONFIRMED";

      // Create array of statuses to refetch (avoid duplicates)
      const statusesToRefetch = [...new Set([currentStatus, newStatus])];

      // Refetch both statuses in parallel
      const refetchPromises = statusesToRefetch.map((status) =>
        loadAppointmentsByStatus(date, status)
      );

      await Promise.allSettled(refetchPromises);
      console.log(
        ` [STATUS UPDATE] Refetched ${statusesToRefetch.length} tab(s) successfully`
      );
    } catch (error) {
      console.error(" Error updating appointment detail status:", error);
      console.error("Error response:", error.response?.data);
      toast.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  // H√†m b·∫Øt ƒë·∫ßu t∆∞ v·∫•n (CONFIRMED -> IN_PROGRESS) - gi·ªëng PersonalSchedule
  const handleStartConsultation = (appointmentDetail, startUrl) => {
    handleStatusUpdate(
      appointmentDetail.id,
      "IN_PROGRESS",
      "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën b·∫Øt ƒë·∫ßu t∆∞ v·∫•n tr·ª±c tuy·∫øn cho d·ªãch v·ª• n√†y?"
    ).then(() => {
      // M·ªü link t∆∞ v·∫•n trong tab m·ªõi sau khi c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng
      if (startUrl) {
        window.open(startUrl, "_blank");
      }
    });
  };

  // H√†m ho√†n th√†nh t∆∞ v·∫•n (IN_PROGRESS -> WAITING_RESULT) - gi·ªëng PersonalSchedule
  const handleCompleteConsultation = (appointmentDetail) => {
    handleStatusUpdate(
      appointmentDetail.id,
      "WAITING_RESULT",
      "B·∫°n c√≥ ch·∫Øc ch·∫Øn ƒë√£ ho√†n th√†nh t∆∞ v·∫•n v√† chuy·ªÉn sang ch·ªù k·∫øt qu·∫£?"
    );
  };

  // Format date and time
  const formatDateTime = (dateString) => {
    if (!dateString) return "Kh√¥ng c√≥";
    const date = new Date(dateString);
    return date.toLocaleString("vi-VN");
  };

  // Get status info for display (gi·ªëng PersonalSchedule)
  const getStatusInfo = (status) => {
    const statusMap = {
      CONFIRMED: {
        color: "cyan",
        icon: <CheckCircleOutlined />,
        text: "ƒê√£ x√°c nh·∫≠n",
        description: "S·∫µn s√†ng t∆∞ v·∫•n tr·ª±c tuy·∫øn",
      },
      IN_PROGRESS: {
        color: "purple",
        icon: <ClockCircleOutlined />,
        text: "ƒêang t∆∞ v·∫•n",
        description: "ƒêang trong qu√° tr√¨nh t∆∞ v·∫•n",
      },
      WAITING_RESULT: {
        color: "orange",
        icon: <ExclamationCircleOutlined />,
        text: "Ch·ªù k·∫øt qu·∫£",
        description: "Ch·ªù t∆∞ v·∫•n vi√™n nh·∫≠p k·∫øt qu·∫£",
      },
      COMPLETED: {
        color: "green",
        icon: <CheckCircleOutlined />,
        text: "Ho√†n th√†nh",
        description: "ƒê√£ ho√†n t·∫•t t∆∞ v·∫•n",
      },
      // Keep some old statuses for compatibility
      PENDING: {
        color: "orange",
        icon: <ExclamationCircleOutlined />,
        text: "ƒêang ch·ªù",
        description: "Ch·ªù x√°c nh·∫≠n",
      },
      CANCELED: {
        color: "red",
        icon: <CloseCircleOutlined />,
        text: "ƒê√£ h·ªßy",
        description: "T∆∞ v·∫•n ƒë√£ b·ªã h·ªßy",
      },
    };
    return (
      statusMap[status] || {
        color: "default",
        icon: <QuestionCircleOutlined />,
        text: status,
        description: "Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh",
      }
    );
  };

  // Table columns v·ªõi c√°c ch·ª©c nƒÉng m·ªü r·ªông
  const getTableColumns = () => {
    const baseColumns = [
      {
        title: "Th√¥ng tin b·ªánh nh√¢n",
        key: "customerInfo",
        render: (_, record) => {
          const detail = record.appointmentDetails?.[0];
          return (
            <div>
              <div className="patient-name">
                <UserOutlined /> {record.customerName || "Ch∆∞a c√≥ t√™n"}
              </div>
              <div className="patient-date">
                üìÖ Ng√†y h·∫πn:{" "}
                {new Date(record.preferredDate).toLocaleDateString("vi-VN")}
              </div>
              <div className="patient-id">üÜî L·ªãch h·∫πn: #{record.id}</div>
              {/* Patient Detail Button */}
              <div className="patient-buttons">
                <PatientDetailButton
                  patientId={record.customerId}
                  patientName={record.customerName || "B·ªánh nh√¢n"}
                  buttonText="Chi ti·∫øt"
                  buttonType="link"
                  buttonSize="small"
                />
              </div>
            </div>
          );
        },
      },
      {
        title: "D·ªãch v·ª• & Th·ªùi gian",
        key: "serviceInfo",
        render: (_, record) => {
          const detail = record.appointmentDetails?.[0];
          return (
            <div>
              <div className="service-name">{record.serviceName}</div>
              <div className="service-time">
                üïê {formatDateTime(detail?.slotTime)}
              </div>
              <div className="service-consultant">
                üë®‚Äç‚öïÔ∏è {detail?.consultantName || "Ch∆∞a ph√¢n c√¥ng"}
              </div>
            </div>
          );
        },
      },
      {
        title: "Tr·∫°ng th√°i",
        key: "status",
        width: 150,
        render: (_, record) => {
          const detail = record.appointmentDetails?.[0];
          const status = detail?.status || record.status;
          const statusInfo = getStatusInfo(status);
          return (
            <div>
              <Tag color={statusInfo.color} icon={statusInfo.icon}>
                {statusInfo.text}
              </Tag>
              <div
                style={{ fontSize: "11px", color: "#999", marginTop: "2px" }}
              >
                {statusInfo.description}
              </div>
            </div>
          );
        },
      },
      {
        title: "H√†nh ƒë·ªông",
        key: "action",
        render: (_, record) => {
          const detail = record.appointmentDetails?.[0];
          const startUrl = detail?.startUrl;
          const status = detail?.status;

          return (
            <Space direction="vertical" size="small">
              {/* N√∫t b·∫Øt ƒë·∫ßu t∆∞ v·∫•n cho status CONFIRMED */}
              {status === "CONFIRMED" && startUrl && (
                <Button
                  type="primary"
                  icon={<VideoCameraOutlined />}
                  size="small"
                  className="start-consultation-btn"
                  onClick={() => handleStartConsultation(detail, startUrl)}
                >
                  B·∫Øt ƒë·∫ßu t∆∞ v·∫•n
                </Button>
              )}

              {/* N√∫t ho√†n th√†nh t∆∞ v·∫•n cho status IN_PROGRESS */}
              {status === "IN_PROGRESS" && (
                <Button
                  type="primary"
                  size="small"
                  icon={<CheckCircleOutlined />}
                  onClick={() => handleCompleteConsultation(detail)}
                  style={{ backgroundColor: "#faad14", borderColor: "#faad14" }}
                >
                  Ho√†n th√†nh t∆∞ v·∫•n
                </Button>
              )}

              {/* N√∫t nh·∫≠p k·∫øt qu·∫£ cho status WAITING_RESULT */}
              {status === "WAITING_RESULT" && (
                <Button
                  type="primary"
                  size="small"
                  icon={<EditOutlined />}
                  onClick={() => {
                    setSelectedAppointmentDetail(detail);
                    setIsResultModalVisible(true);
                  }}
                  className="result-input-btn"
                >
                  Nh·∫≠p k·∫øt qu·∫£
                </Button>
              )}

              {/* Hi·ªÉn th·ªã tr·∫°ng th√°i ho√†n th√†nh */}
              {status === "COMPLETED" && (
                <div className="completed-status">ƒê√£ ho√†n th√†nh</div>
              )}
            </Space>
          );
        },
      },
    ];

    // Th√™m c·ªôt k·∫øt qu·∫£ kh√°m cho tab completed
    if (activeTab === "completed") {
      baseColumns.push({
        title: "K·∫øt qu·∫£ t∆∞ v·∫•n",
        key: "medicalResult",
        ellipsis: true,
        width: 300,
        render: (_, record) => {
          const detail = record.appointmentDetails?.[0];
          const result = detail?.medicalResult;
          return result ? (
            <MedicalResultViewer result={result} compact={true} />
          ) : (
            <span style={{ color: "#999" }}>Ch∆∞a c√≥ k·∫øt qu·∫£</span>
          );
        },
      });
    }

    return baseColumns;
  };

  return (
    <div className="online-consultation-container">
      <div className="online-consultation-header">
        <h1 className="online-consultation-title">
          <SolutionOutlined /> T∆∞ v·∫•n tr·ª±c tuy·∫øn
        </h1>
        <p className="online-consultation-description">
          Qu·∫£n l√Ω c√°c cu·ªôc t∆∞ v·∫•n tr·ª±c tuy·∫øn ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n
        </p>
      </div>

      {/* Statistics Cards - Compact Version gi·ªëng PersonalSchedule */}
      <Row gutter={12} className="statistics-cards-container">
        <Col span={6}>
          <Card
            size="small"
            styles={{ body: { padding: "12px" } }}
            className="statistics-card"
          >
            <div className="statistics-card-content">
              <CalendarOutlined className="statistics-icon statistics-total" />
              <span className="statistics-text statistics-total">
                T·ªïng d·ªãch v·ª• (
                {(tabsData.CONFIRMED?.length || 0) +
                  (tabsData.IN_PROGRESS?.length || 0) +
                  (tabsData.WAITING_RESULT?.length || 0) +
                  (tabsData.COMPLETED?.length || 0)}
                )
              </span>
            </div>
          </Card>
        </Col>
        <Col span={6}>
          <Card
            size="small"
            styles={{ body: { padding: "12px" } }}
            className="statistics-card"
          >
            <div className="statistics-card-content">
              <CheckCircleOutlined className="statistics-icon statistics-confirmed" />
              <span className="statistics-text statistics-confirmed">
                ƒê√£ x√°c nh·∫≠n ({tabsData.CONFIRMED?.length || 0})
              </span>
            </div>
          </Card>
        </Col>
        <Col span={6}>
          <Card
            size="small"
            styles={{ body: { padding: "12px" } }}
            className="statistics-card"
          >
            <div className="statistics-card-content">
              <ExclamationCircleOutlined className="statistics-icon statistics-waiting" />
              <span className="statistics-text statistics-waiting">
                Ch·ªù k·∫øt qu·∫£ ({tabsData.WAITING_RESULT?.length || 0})
              </span>
            </div>
          </Card>
        </Col>
        <Col span={6}>
          <Card
            size="small"
            styles={{ body: { padding: "12px" } }}
            className="statistics-card"
          >
            <div className="statistics-card-content">
              <CheckCircleOutlined className="statistics-icon statistics-completed" />
              <span className="statistics-text statistics-completed">
                Ho√†n th√†nh ({tabsData.COMPLETED?.length || 0})
              </span>
            </div>
          </Card>
        </Col>
      </Row>

      {/* Date Picker */}
      <Card className="date-picker-container">
        <div className="date-picker-content">
          <span className="date-picker-label">
            <CalendarOutlined /> Ch·ªçn ng√†y:
          </span>
          <DatePicker
            value={
              currentSelectedDate
                ? dayjs(currentSelectedDate).startOf("day")
                : dayjs().startOf("day")
            }
            onChange={handleDatePickerChange}
            format="DD/MM/YYYY"
            placeholder="Ch·ªçn ng√†y"
            className="date-picker-input"
            allowClear={false}
          />
          <span className="date-picker-info">
            Hi·ªÉn th·ªã t∆∞ v·∫•n tr·ª±c tuy·∫øn ng√†y{" "}
            {currentSelectedDate.toLocaleDateString("vi-VN")}
          </span>
        </div>
      </Card>

      {/* Tabs and Table */}
      <Card>
        <Tabs
          activeKey={activeTab}
          onChange={handleTabChange}
          items={[
            {
              key: "confirmed",
              label: (
                <span>
                  <CheckCircleOutlined />
                  ƒê√£ x√°c nh·∫≠n ({tabsData.CONFIRMED?.length || 0})
                </span>
              ),
            },
            {
              key: "in_progress",
              label: (
                <span>
                  <ClockCircleOutlined />
                  ƒêang t∆∞ v·∫•n ({tabsData.IN_PROGRESS?.length || 0})
                </span>
              ),
            },
            {
              key: "waiting_result",
              label: (
                <span>
                  <ExclamationCircleOutlined />
                  Ch·ªù k·∫øt qu·∫£ ({tabsData.WAITING_RESULT?.length || 0})
                </span>
              ),
            },
            {
              key: "completed",
              label: (
                <span>
                  <CheckCircleOutlined />
                  Ho√†n th√†nh ({tabsData.COMPLETED?.length || 0})
                </span>
              ),
            },
          ]}
        />

        <Table
          columns={getTableColumns()}
          dataSource={getCurrentTabData()}
          rowKey="id"
          loading={isLoadingData}
          className="online-consultation-table"
          pagination={{
            pageSize: 10,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total) => `T·ªïng ${total} cu·ªôc t∆∞ v·∫•n`,
          }}
          locale={{
            emptyText: (
              <div className="empty-state-container">
                <SolutionOutlined className="empty-state-icon" />
                <div className="empty-state-message">
                  Kh√¥ng c√≥ cu·ªôc t∆∞ v·∫•n tr·ª±c tuy·∫øn n√†o cho ng√†y{" "}
                  {currentSelectedDate.toLocaleDateString("vi-VN")}
                </div>
                <div className="empty-state-hint">
                  H√£y th·ª≠ ch·ªçn ng√†y kh√°c ho·∫∑c ki·ªÉm tra l·∫°i l·ªãch h·∫πn
                </div>
              </div>
            ),
          }}
        />
      </Card>

      {/* Modal nh·∫≠p k·∫øt qu·∫£ kh√°m */}
      <Modal
        title="Nh·∫≠p k·∫øt qu·∫£ t∆∞ v·∫•n tr·ª±c tuy·∫øn"
        open={isResultModalVisible}
        onCancel={() => {
          setIsResultModalVisible(false);
          setSelectedAppointmentDetail(null);
        }}
        footer={null}
        width={800}
        destroyOnClose={true}
        key={selectedAppointmentDetail?.id || "medical-result-modal"}
      >
        {selectedAppointmentDetail && (
          <MedicalResultForm
            key={`medical-form-${selectedAppointmentDetail.id}`}
            appointmentDetail={selectedAppointmentDetail}
            consultationType="online"
            onSuccess={async () => {
              setIsResultModalVisible(false);
              setSelectedAppointmentDetail(null);
              toast.success("K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");

              // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh COMPLETED sau khi l∆∞u k·∫øt qu·∫£ (kh√¥ng c·∫ßn confirmation)
              try {
                console.log(
                  " [STATUS] Updating appointment detail status to COMPLETED"
                );
                await updateAppointmentDetailStatus(
                  selectedAppointmentDetail.id,
                  "COMPLETED"
                );
                console.log(
                  " [STATUS] Appointment detail status updated to COMPLETED"
                );

                // Reload d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t UI
                const date = dayjs(currentSelectedDate).format("YYYY-MM-DD");
                await loadAppointmentsByStatus(date, "WAITING_RESULT");
                await loadAppointmentsByStatus(date, "COMPLETED");
              } catch (error) {
                console.error(
                  " [STATUS] Error updating appointment detail status:",
                  error
                );
                // Don't show error to user as medical result was saved successfully
              }
            }}
            onCancel={() => {
              setIsResultModalVisible(false);
              setSelectedAppointmentDetail(null);
            }}
          />
        )}
      </Modal>

      {/* Modal t∆∞ v·∫•n tr·ª±c tuy·∫øn */}
      <Modal
        title="T∆∞ v·∫•n tr·ª±c tuy·∫øn"
        open={setIsConsultationModalVisible}
        onOk={() => {
          consultForm.validateFields().then((values) => {
            console.log("Consultation data:", values);
            toast.success("T∆∞ v·∫•n ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n!");
            setIsConsultationModalVisible(false);
            consultForm.resetFields();
          });
        }}
        onCancel={() => setIsConsultationModalVisible(false)}
        okText="L∆∞u"
        cancelText="H·ªßy"
      >
        <Form form={consultForm} layout="vertical">
          <Form.Item
            name="patientName"
            label="T√™n b·ªánh nh√¢n"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p t√™n b·ªánh nh√¢n!" },
            ]}
          >
            <Input />
          </Form.Item>
          <Form.Item name="consultationNotes" label="Ghi ch√∫ t∆∞ v·∫•n">
            <Input.TextArea rows={4} />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default OnlineConsultation;
