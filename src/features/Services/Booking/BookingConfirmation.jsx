"use client";
import { useLocation, useNavigate } from "react-router-dom";
import { message, Avatar } from "antd";
import "./BookingConfirmation.css";
import { useState, useEffect } from "react";
import api from "../../../configs/api";

const BookingConfirmation = () => {
  const navigate = useNavigate();
  const { state: booking } = useLocation();
  const token = localStorage.getItem("token");
  const [paymentMethod, setPaymentMethod] = useState("direct");
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const fullBooking = {
    ...booking,
    price: booking.price,
    serviceName: booking.serviceName,
  };

  // Fetch user data from API /api/me
  useEffect(() => {
    const fetchUserData = async () => {
      if (!token) {
        setLoading(false);
        return;
      }

      try {
        const response = await api.get("/me");
        console.log("‚úÖ User data from /api/me:", response.data);
        setUser(response.data);
      } catch (error) {
        console.error("‚ùå Error fetching user data:", error);
        message.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng");
      } finally {
        setLoading(false);
      }
    };

    fetchUserData();
  }, [token]);
  if (!token) {
    return (
      <div className="booking-confirmation-container">
        <p
          style={{
            padding: 40,
            color: "#2753d0",
            fontWeight: "bold",
            fontSize: "30px",
            textAlign: "center",
          }}
        >
          B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c ƒë·∫∑t l·ªãch.
        </p>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="booking-confirmation-container">
        <p
          style={{
            padding: 40,
            color: "#2753d0",
            fontWeight: "bold",
            fontSize: "18px",
            textAlign: "center",
          }}
        >
          ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...
        </p>
      </div>
    );
  }

  if (!booking) {
    return (
      <div className="booking-confirmation-container">
        <div className="booking-no-data">Kh√¥ng c√≥ th√¥ng tin ƒë·∫∑t l·ªãch!</div>
      </div>
    );
  }

  const handleConfirmBooking = async () => {
    const payload = {
      // userId: user.id,
      service_id: Number(booking.serviceId),
      preferredDate: booking.preferredDate,
      slot: booking.slot,
      slot_id: booking.slotId,
      note: booking.note,
      paymentMethod,
    };

    console.log(" Payload g·ª≠i:", payload);

    try {
      const res = await api.post("/booking/medicalService", payload);

      //  In to√†n b·ªô ph·∫£n h·ªìi t·ª´ server ƒë·ªÉ ki·ªÉm tra
      console.log("üì• Ph·∫£n h·ªìi t·ª´ backend khi t·∫°o booking:", res.data);

      const appointmentId = res.data.appointmentId;
      if (!appointmentId) {
        message.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ l·ªãch h·∫πn t·ª´ ph·∫£n h·ªìi server.");
        return;
      }

      // Trigger refresh schedule data khi user quay l·∫°i booking form
      localStorage.setItem("shouldRefreshSchedule", "true");
      localStorage.setItem("lastBookedServiceId", booking.serviceId);

      message.success("ƒê·∫∑t l·ªãch th√†nh c√¥ng!");

      // N·∫øu ch·ªçn thanh to√°n VNPay, l∆∞u th√¥ng tin v√† chuy·ªÉn ƒë·∫øn trang Payment
      if (paymentMethod === "vnpay") {
        localStorage.setItem(
          "pendingBooking",
          JSON.stringify({
            appointmentId,
            paymentMethod,
            amount: fullBooking.price,
            serviceName: fullBooking.serviceName,
          })
        );

        // Chuy·ªÉn ƒë·∫øn trang Payment ƒë·ªÉ x·ª≠ l√Ω VNPay
        navigate("/payment");
      } else {
        // Thanh to√°n tr·ª±c ti·∫øp - chuy·ªÉn v·ªÅ trang booking
        navigate("/user/booking");
      }
    } catch (error) {
      const errorMessage =
        error.response?.data?.message ||
        (typeof error.response?.data === "string"
          ? error.response.data
          : "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ m√°y ch·ªß");

      //  In l·ªói ƒë·∫ßy ƒë·ªß n·∫øu server c√≥ tr·∫£ g√¨ ƒë√≥
      console.error(" L·ªói ph·∫£n h·ªìi t·ª´ server:", error.response?.data);
      message.error(`ƒê·∫∑t l·ªãch th·∫•t b·∫°i: ${errorMessage}`);
    }
  };

  return (
    <div className="booking-confirmation-container">
      <div className="booking-notification">
        <div className="booking-notification-content">
          <div className="booking-notification-icon">!</div>
          <span className="booking-notification-text">
            Vui l√≤ng x√°c minh l·∫°i th√¥ng tin c·ªßa b·∫°n v√† x√°c nh·∫≠n ƒë·∫∑t l·ªãch h·∫πn.
          </span>
        </div>
      </div>

      <div className="booking-main-content">
        <div className="booking-card">
          <h2 className="booking-card-title">Ng∆∞·ªùi s·ª≠ d·ª•ng d·ªãch v·ª•</h2>
          <div className="booking-user-profile">
            <Avatar
              size={48}
              src={user?.imageUrl}
              className="booking-user-avatar"
            >
              {user?.fullname?.charAt(0) || "U"}
            </Avatar>
            <div className="booking-user-info">
              <h3>{user?.fullname || "Kh√¥ng c√≥ t√™n"}</h3>
              <p>{user?.email || "Kh√¥ng c√≥ email"}</p>
            </div>
          </div>
          <div className="booking-info-item">
            <span className="booking-info-label">Vai tr√≤:</span>
            <span className="booking-info-value">
              {user?.role || "Ch∆∞a cung c·∫•p"}
            </span>
          </div>
          <div className="booking-info-item">
            <span className="booking-info-label">S·ªë ƒëi·ªán tho·∫°i:</span>
            <span className="booking-info-value">
              {user?.phone || "Ch∆∞a cung c·∫•p"}
            </span>
          </div>
          <div className="booking-info-item">
            <span className="booking-info-label">ƒê·ªãa ch·ªâ:</span>
            <span className="booking-info-value">
              {user?.address || "Ch∆∞a cung c·∫•p"}
            </span>
          </div>
          <div className="booking-info-item">
            <span className="booking-info-label">Ghi ch√∫:</span>
            <span className="booking-info-value">
              {booking.note || "(Kh√¥ng c√≥)"}
            </span>
          </div>
        </div>

        <div className="booking-card">
          <h2 className="booking-card-title">L·ªãch h·∫πn c·ªßa b·∫°n</h2>
          <div className="booking-info-item">
            <span className="booking-info-label">D·ªãch v·ª•:</span>
            <span className="booking-info-value booking-service-name">
              {booking.serviceName}
            </span>
          </div>
          <div className="booking-info-item">
            <span className="booking-info-label">Th·ªùi l∆∞·ª£ng:</span>
            <span className="booking-info-value">{booking.duration} ph√∫t</span>
          </div>
          <div className="booking-info-item">
            <span className="booking-info-label">Gi√°:</span>
            <span className="booking-info-value booking-price">
              {booking.price?.toLocaleString()} ƒë
            </span>
          </div>
          <div className="booking-info-item">
            <span className="booking-info-label">Ng√†y h·∫πn:</span>
            <span className="booking-info-value">{booking.preferredDate}</span>
          </div>
          <div className="booking-info-item">
            <span className="booking-info-label">Khung gi·ªù:</span>
            <span className="booking-info-value">{booking.slot}</span>
          </div>
        </div>
      </div>

      <div className="booking-card booking-payment-section">
        <h2 className="booking-payment-title">Ph∆∞∆°ng th·ª©c thanh to√°n</h2>
        <div
          className={`booking-payment-method ${
            paymentMethod === "direct" ? "selected" : ""
          }`}
          onClick={() => setPaymentMethod("direct")}
        >
          <input
            type="radio"
            id="direct"
            name="payment"
            value="direct"
            checked={paymentMethod === "direct"}
            onChange={(e) => setPaymentMethod(e.target.value)}
          />
          <img
            src="/cash-wallet.svg"
            alt="Thanh to√°n tr·ª±c ti·∫øp"
            className="booking-payment-logo"
          />
          <div className="booking-payment-info">
            <label htmlFor="direct">Thanh to√°n tr·ª±c ti·∫øp</label>
            <p>Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t t·∫°i qu·∫ßy</p>
          </div>
        </div>

        <div
          className={`booking-payment-method ${
            paymentMethod === "vnpay" ? "selected" : ""
          }`}
          onClick={() => setPaymentMethod("vnpay")}
        >
          <input
            type="radio"
            id="vnpay"
            name="payment"
            value="vnpay"
            checked={paymentMethod === "vnpay"}
            onChange={(e) => setPaymentMethod(e.target.value)}
          />
          <img
            src="/LOGOGVNPAY-QR.png"
            alt="VNPay"
            className="booking-payment-logo"
          />
          <div className="booking-payment-info">
            <label htmlFor="vnpay">Thanh to√°n qua VNPay</label>
            <p>Th·∫ª ATM, Visa, Mastercard, QR Code</p>
          </div>
        </div>
      </div>

      <div className="booking-confirm-section">
        <button
          className="booking-confirm-button"
          onClick={handleConfirmBooking}
        >
          Ti·∫øn h√†nh x√°c nh·∫≠n
        </button>
      </div>
    </div>
  );
};

export default BookingConfirmation;
