// LogModal.jsx - PHI√äN B·∫¢N HO√ÄN CH·ªàNH

import React, { useState, useEffect } from 'react';
import { format } from 'date-fns';
import { vi } from 'date-fns/locale';
import './LogModal.css';

const SYMPTOM_OPTIONS = [
  "ƒêau b·ª•ng", "M·ªát m·ªèi", "ƒêau ƒë·∫ßu", "N·ªïi m·ª•n", "T√¢m tr·∫°ng thay ƒë·ªïi", "CƒÉng ng·ª±c",
];

// THAY ƒê·ªîI 1: Nh·∫≠n th√™m prop `periodDayNumber` t·ª´ component cha
const LogModal = ({ date, existingLog, onSave, onClose, periodDayNumber }) => {

  // THAY ƒê·ªîI 2: C·∫≠p nh·∫≠t logic kh·ªüi t·∫°o state
  // `isPeriodStart` s·∫Ω ƒë∆∞·ª£c check n·∫øu cha (CycleTracker) n√≥i r·∫±ng ƒë√¢y l√† m·ªôt ng√†y kinh (`periodDayNumber > 0`)
  // HO·∫∂C n·∫øu n√≥ ƒë√£ ƒë∆∞·ª£c l∆∞u l√† ng√†y b·∫Øt ƒë·∫ßu t·ª´ tr∆∞·ªõc (`existingLog?.isPeriodStart`).
  const [isPeriodStart, setIsPeriodStart] = useState(
    !!(existingLog?.isPeriodStart || periodDayNumber)
  );
  
  // Kh·ªüi t·∫°o state cho tri·ªáu ch·ª©ng m·ªôt c√°ch ng·∫Øn g·ªçn
  const [selectedSymptoms, setSelectedSymptoms] = useState(existingLog?.symptoms || []);

  // `useEffect` kh√¥ng c√≤n c·∫ßn thi·∫øt n·ªØa v√¨ ch√∫ng ta ƒë√£ kh·ªüi t·∫°o state ·ªü tr√™n.

  if (!date) return null;

  const handleSymptomChange = (symptom) => {
    setSelectedSymptoms(prev =>
      prev.includes(symptom)
        ? prev.filter(s => s !== symptom)
        : [...prev, symptom]
    );
  };

  const handleSave = () => {
    // Ch√∫ng ta ch·ªâ l∆∞u isPeriodStart = true n·∫øu ƒë√¢y l√† l·∫ßn ƒë·∫ßu ng∆∞·ªùi d√πng ƒë√°nh d·∫•u.
    // N·∫øu ƒë√¢y ƒë√£ l√† ng√†y kinh th·ª© 2, 3... th√¨ kh√¥ng c·∫ßn l∆∞u l·∫°i isPeriodStart.
    const shouldMarkAsStart = isPeriodStart && !periodDayNumber;
    onSave(date, { isPeriodStart: shouldMarkAsStart, symptoms: selectedSymptoms });
    onClose();
  };

  // THAY ƒê·ªîI 3: Logic hi·ªÉn th·ªã s·ªë ng√†y kinh
  // N·∫øu cha g·ª≠i xu·ªëng `periodDayNumber`, h√£y d√πng n√≥.
  // N·∫øu kh√¥ng (ng∆∞·ªùi d√πng v·ª´a tick m·ªõi), m·∫∑c ƒë·ªãnh hi·ªÉn th·ªã l√† 1.
  const displayPeriodDay = periodDayNumber || 1;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={e => e.stopPropagation()}>
        <button className="modal-close-button" onClick={onClose}>√ó</button>
        
        <h2>
          Ghi ch√∫ cho ng√†y: {format(date, 'dd MMMM, yyyy', { locale: vi })}
        </h2>
    
        <div className="modal-section period-start-option">
          <label className="period-start-label">
            <input
              type="checkbox"
              checked={isPeriodStart}
              onChange={e => setIsPeriodStart(e.target.checked)}
              // THAY ƒê·ªîI 4: V√¥ hi·ªáu h√≥a checkbox n·∫øu ƒë√¢y l√† ng√†y 2, 3...
              // Ng∆∞·ªùi d√πng kh√¥ng th·ªÉ ƒë√°nh d·∫•u ng√†y th·ª© 3 l√† "ng√†y b·∫Øt ƒë·∫ßu".
              disabled={periodDayNumber > 1}
            />
            ƒê√°nh d·∫•u l√† ng√†y b·∫Øt ƒë·∫ßu k·ª≥ kinh
          </label>
        </div>
    
        {/* THAY ƒê·ªîI 5: Th√™m card th√¥ng b√°o "Ng√†y h√†nh kinh X" */}
        {isPeriodStart && (
          <div className="period-day-info-card">
            ü©∏ Ng√†y h√†nh kinh {displayPeriodDay}
          </div>
        )}

        <div className="modal-section">
          <h4>Tri·ªáu ch·ª©ng h√¥m nay:</h4>
          <div className="symptoms-grid">
            {SYMPTOM_OPTIONS.map(symptom => (
              <label key={symptom} className="symptom-label">
                <input
                  type="checkbox"
                  value={symptom}
                  checked={selectedSymptoms.includes(symptom)}
                  onChange={() => handleSymptomChange(symptom)}
                />
                <span>{symptom}</span>
              </label>
            ))}
          </div>
        </div>

        <div className="modal-actions">
          <button className="button-secondary" onClick={onClose}>H·ªßy</button>
          <button className="button-primary" onClick={handleSave}>L∆∞u thay ƒë·ªïi</button>
        </div>
      </div>
    </div>
  );
};

export default LogModal;