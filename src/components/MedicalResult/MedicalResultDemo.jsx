import React from "react";
import { Row, Col, Card, Typography, Space, Divider, Button } from "antd";
import {
  DownloadOutlined,
  PrinterOutlined,
  CloseOutlined,
} from "@ant-design/icons";
import MedicalResultViewer, {
  MedicalResultDashboard,
} from "./MedicalResultViewer";
import MedicalResultTimeline from "./MedicalResultTimeline";

const { Title, Paragraph } = Typography;

const MedicalResultDemo = () => {
  // Mock data for demonstration
  const mockResults = [
    {
      id: 1,
      testName: "Glucose m√°u",
      testResult: "126",
      normalRange: "70-100",
      testStatus: "ABNORMAL",
      resultType: "LAB_TEST",
      severity: "HIGH",
      diagnosis: "Ti·ªÅn ti·ªÉu ƒë∆∞·ªùng - c·∫ßn theo d√µi v√† ƒëi·ªÅu ch·ªânh ch·∫ø ƒë·ªô ƒÉn u·ªëng",
      treatmentPlan:
        "Ki·ªÉm so√°t ch·∫ø ƒë·ªô ƒÉn, t·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n, t√°i kh√°m sau 3 th√°ng",
      labNotes: "B·ªánh nh√¢n nh·ªãn ƒÉn 8 ti·∫øng tr∆∞·ªõc khi x√©t nghi·ªám",
      createdAt: "2024-01-15T08:30:00Z",
      doctorName: "BS. Nguy·ªÖn VƒÉn A",
    },
    {
      id: 2,
      testName: "Cholesterol to√†n ph·∫ßn",
      testResult: "180",
      normalRange: "150-200",
      testStatus: "NORMAL",
      resultType: "LAB_TEST",
      severity: "LOW",
      diagnosis: "M·ª©c cholesterol trong gi·ªõi h·∫°n b√¨nh th∆∞·ªùng",
      treatmentPlan: "Duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh",
      createdAt: "2024-01-15T08:30:00Z",
      doctorName: "BS. Nguy·ªÖn VƒÉn A",
    },
    {
      id: 3,
      testName: "X-quang ph·ªïi",
      testResult: "Ph√°t hi·ªán ƒë·ªëm m·ªù v√πng ph·ªïi tr√°i",
      normalRange: "Kh√¥ng c√≥ b·∫•t th∆∞·ªùng",
      testStatus: "ABNORMAL",
      resultType: "IMAGING",
      severity: "MEDIUM",
      diagnosis: "Nghi ng·ªù vi√™m ph·ªïi nh·∫π ho·∫∑c s·∫πo ph·ªïi c≈©",
      treatmentPlan:
        "Ch·ª•p CT ph·ªïi ƒë·ªÉ ƒë√°nh gi√° chi ti·∫øt h∆°n, k√™ ƒë∆°n kh√°ng sinh d·ª± ph√≤ng",
      labNotes: "B·ªánh nh√¢n c√≥ ti·ªÅn s·ª≠ h√∫t thu·ªëc",
      createdAt: "2024-01-14T14:20:00Z",
      doctorName: "BS. Tr·∫ßn Th·ªã B",
    },
    {
      id: 4,
      testName: "T∆∞ v·∫•n tim m·∫°ch",
      testResult: "Nh·ªãp tim ƒë·ªÅu, huy·∫øt √°p 130/85",
      normalRange: "120/80",
      testStatus: "BORDERLINE",
      resultType: "CONSULTATION",
      severity: "MEDIUM",
      diagnosis: "Huy·∫øt √°p cao nh·∫π (giai ƒëo·∫°n 1)",
      treatmentPlan:
        "Gi·∫£m mu·ªëi trong ƒÉn u·ªëng, t·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng, theo d√µi huy·∫øt √°p h√†ng ng√†y",
      createdAt: "2024-01-13T10:15:00Z",
      doctorName: "BS. L√™ VƒÉn C",
    },
    {
      id: 5,
      testName: "Glucose m√°u",
      testResult: "95",
      normalRange: "70-100",
      testStatus: "NORMAL",
      resultType: "LAB_TEST",
      severity: "LOW",
      diagnosis: "ƒê∆∞·ªùng huy·∫øt b√¨nh th∆∞·ªùng",
      treatmentPlan: "Ti·∫øp t·ª•c duy tr√¨ ch·∫ø ƒë·ªô ƒÉn u·ªëng hi·ªán t·∫°i",
      createdAt: "2023-12-15T08:30:00Z",
      doctorName: "BS. Nguy·ªÖn VƒÉn A",
    },
    {
      id: 6,
      testName: "Glucose m√°u",
      testResult: "110",
      normalRange: "70-100",
      testStatus: "BORDERLINE",
      resultType: "LAB_TEST",
      severity: "MEDIUM",
      diagnosis: "ƒê∆∞·ªùng huy·∫øt cao nh·∫π",
      treatmentPlan: "Gi·∫£m ƒë∆∞·ªùng trong ƒÉn u·ªëng, t√°i kh√°m sau 1 th√°ng",
      createdAt: "2023-11-15T08:30:00Z",
      doctorName: "BS. Nguy·ªÖn VƒÉn A",
    },
  ];

  // Filter glucose results for timeline demo
  const glucoseResults = mockResults.filter(
    (r) => r.testName === "Glucose m√°u"
  );

  return (
    <div style={{ padding: "24px", background: "#f5f5f5", minHeight: "100vh" }}>
      <Title level={2}>üè• Medical Result Viewer - Demo</Title>
      <Paragraph>
        H·ªá th·ªëng hi·ªÉn th·ªã k·∫øt qu·∫£ y t·∫ø chuy√™n nghi·ªáp, l·∫•y c·∫£m h·ª©ng t·ª´ c√°c b·ªánh
        vi·ªán h√†ng ƒë·∫ßu th·∫ø gi·ªõi
      </Paragraph>

      <Divider />

      {/* Compact View Demo */}
      <Title level={3}> Ch·∫ø ƒë·ªô xem compact</Title>
      <Row gutter={[16, 16]} style={{ marginBottom: 32 }}>
        {mockResults.slice(0, 4).map((result) => (
          <Col span={12} key={result.id}>
            <MedicalResultViewer result={result} compact={true} />
          </Col>
        ))}
      </Row>

      <Divider />

      {/* Full View Demo */}
      <Title level={3}> Ch·∫ø ƒë·ªô xem chi ti·∫øt</Title>
      <Card style={{ marginBottom: 32 }}>
        <MedicalResultViewer result={mockResults[0]} compact={false} />
      </Card>

      <Divider />

      {/* Timeline Demo */}
      <Title level={3}>üìà L·ªãch s·ª≠ theo d√µi</Title>
      <Card style={{ marginBottom: 32 }}>
        <MedicalResultTimeline
          results={glucoseResults}
          testName="Glucose m√°u"
        />
      </Card>

      <Divider />

      {/* Dashboard Demo */}
      <Title level={3}>üéõÔ∏è Dashboard t·ªïng quan</Title>
      <MedicalResultDashboard results={mockResults} />

      <Divider />

      {/* Interactive Demo */}
      <Title level={3}>üéÆ Demo t∆∞∆°ng t√°c</Title>
      <Card style={{ marginBottom: 32 }}>
        <Row gutter={16}>
          <Col span={12}>
            <Card size="small" title="Test c√°c ch·ª©c nƒÉng">
              <Space direction="vertical" style={{ width: "100%" }}>
                <Button
                  type="primary"
                  icon={<DownloadOutlined />}
                  block
                  onClick={() => {
                    // Import the function from the component
                    const result = mockResults[0];
                    const link = document.createElement("a");
                    link.href =
                      "data:text/html;charset=utf-8," +
                      encodeURIComponent(`
                      <h1>Demo PDF - ${result.testName}</h1>
                      <p>K·∫øt qu·∫£: ${result.testResult}</p>
                      <p>Tr·∫°ng th√°i: ${result.testStatus}</p>
                      <p>Ch·∫©n ƒëo√°n: ${result.diagnosis}</p>
                    `);
                    link.download = "demo-result.html";
                    link.click();
                  }}
                >
                  Test t·∫£i xu·ªëng PDF
                </Button>
                <Button
                  icon={<PrinterOutlined />}
                  block
                  onClick={() => {
                    const printWindow = window.open("", "_blank");
                    printWindow.document.write(`
                      <h1>Demo Print - ${mockResults[0].testName}</h1>
                      <p>K·∫øt qu·∫£: ${mockResults[0].testResult}</p>
                      <p>Tr·∫°ng th√°i: ${mockResults[0].testStatus}</p>
                    `);
                    printWindow.document.close();
                    printWindow.print();
                  }}
                >
                  Test in ·∫•n
                </Button>
                <Button
                  danger
                  icon={<CloseOutlined />}
                  block
                  onClick={() => {
                    if (window.history.length > 1) {
                      window.history.back();
                    } else {
                      alert("Demo: S·∫Ω ƒë√≥ng tab (Ctrl+W)");
                    }
                  }}
                >
                  Test ƒë√≥ng tab
                </Button>
              </Space>
            </Card>
          </Col>
          <Col span={12}>
            <Card size="small" title="Keyboard Shortcuts">
              <ul style={{ margin: 0, paddingLeft: 20 }}>
                <li>
                  <kbd>Ctrl</kbd> + <kbd>P</kbd> - In nhanh
                </li>
                <li>
                  <kbd>Ctrl</kbd> + <kbd>S</kbd> - L∆∞u/T·∫£i xu·ªëng
                </li>
                <li>
                  <kbd>Ctrl</kbd> + <kbd>W</kbd> - ƒê√≥ng tab
                </li>
                <li>
                  <kbd>Esc</kbd> - ƒê√≥ng modal
                </li>
                <li>
                  <kbd>Enter</kbd> - Xem chi ti·∫øt
                </li>
              </ul>
            </Card>
          </Col>
        </Row>
      </Card>

      {/* Features List */}
      <Card title="‚ú® T√≠nh nƒÉng n·ªïi b·∫≠t">
        <Row gutter={16}>
          <Col span={12}>
            <Title level={4}> Thi·∫øt k·∫ø chuy√™n nghi·ªáp</Title>
            <ul>
              <li>Giao di·ªán hi·ªán ƒë·∫°i, tr·ª±c quan</li>
              <li>M√†u s·∫Øc ph√¢n lo·∫°i theo m·ª©c ƒë·ªô nghi√™m tr·ªçng</li>
              <li>Responsive design cho m·ªçi thi·∫øt b·ªã</li>
              <li>Animation m∆∞·ª£t m√†</li>
            </ul>
          </Col>
          <Col span={12}>
            <Title level={4}> Tr·ª±c quan h√≥a d·ªØ li·ªáu</Title>
            <ul>
              <li>Progress bar cho gi√° tr·ªã x√©t nghi·ªám</li>
              <li>Timeline theo d√µi l·ªãch s·ª≠</li>
              <li>Dashboard th·ªëng k√™ t·ªïng quan</li>
              <li>Bi·ªÉu ƒë·ªì xu h∆∞·ªõng (coming soon)</li>
            </ul>
          </Col>
        </Row>
        <Row gutter={16} style={{ marginTop: 16 }}>
          <Col span={12}>
            <Title level={4}>üîß T√≠nh nƒÉng ti·ªán √≠ch - ƒê√É HO·∫†T ƒê·ªòNG</Title>
            <ul>
              <li> Export HTML/PDF ho·∫°t ƒë·ªông</li>
              <li> Print v·ªõi layout t·ªëi ∆∞u</li>
              <li> Modal xem chi ti·∫øt</li>
              <li> ƒê√≥ng tab th√¥ng minh</li>
              <li> Toast notifications</li>
              <li> Loading states</li>
            </ul>
          </Col>
          <Col span={12}>
            <Title level={4}>üè• Chu·∫©n y t·∫ø</Title>
            <ul>
              <li>Tu√¢n th·ªß chu·∫©n hi·ªÉn th·ªã y t·∫ø</li>
              <li>Ph√¢n lo·∫°i m·ª©c ƒë·ªô nghi√™m tr·ªçng</li>
              <li>Ghi ch√∫ t·ª´ b√°c sƒ©/ph√≤ng lab</li>
              <li>L·ªãch s·ª≠ theo d√µi chi ti·∫øt</li>
              <li>Keyboard accessibility</li>
              <li>Print-optimized layouts</li>
            </ul>
          </Col>
        </Row>
      </Card>
    </div>
  );
};

export default MedicalResultDemo;
