import { useState } from "react";
import { Form, Input, Button, message, Spin, DatePicker, Select } from "antd";
import GradientButton from "../common/GradientButton";
import axios from "axios";
import LoginFace from "../../api/LoginFace";
import LoginGoogle from "../../api/LoginGoogle";
import api from "../../configs/axios";
import { useDispatch } from "react-redux";
import { toast } from "react-toastify";
import { login } from "../../redux/features/userSlice";
const { Option } = Select;

const LoginForm = () => {
  const [loading, setLoading] = useState(false);
  const [form] = Form.useForm();
  const [profileForm] = Form.useForm();
  const [step, setStep] = useState(1); // 1: login, 2: khai b√°o th√¥ng tin
  const [userId, setUserId] = useState(null);

  const dispatch = useDispatch();
  // dispatch(login(response.data.data));
  //     localStorage.setItem("token", response.data.data.token);
  //     // dispatch g·ª≠i action l√™n redux store
  //     // action n√†y s·∫Ω ƒë∆∞·ª£c userSlice x·ª≠ l√Ω
  //     navigate("/dashboard");

  // ƒêƒÉng nh·∫≠p b·∫±ng email v√† m·∫≠t kh·∫©u
  const handleLogin = async (values) => {
    try {
      setLoading(true);
      const res = await axios.get(
        `http://localhost:8080/users?email=${values.email}&password=${values.password}`
      );
      const user = res.data[0];
      if (user) {
        // N·∫øu thi·∫øu th√¥ng tin c√° nh√¢n th√¨ chuy·ªÉn sang step 2
        if (!user.fullname || !user.gender || !user.dob) {
          setUserId(user.id);
          setStep(2);
          toast.success(
            "ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Vui l√≤ng khai b√°o th√¥ng tin c√° nh√¢n."
          );
        } else {
          toast.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
          // TODO: ƒê√≥ng modal ho·∫∑c redirect
        }
      } else {
        toast.error("Sai email ho·∫∑c m·∫≠t kh·∫©u!");
      }
    } catch (err) {
      toast.error("L·ªói ƒëƒÉng nh·∫≠p!");
    } finally {
      setLoading(false);
    }
  };

  // L∆∞u th√¥ng tin c√° nh√¢n
  const handleFinishProfile = async (values) => {
    try {
      setLoading(true);
      await axios.patch(`http://localhost:8080/users/${userId}`, values);
      toast.success("Khai b√°o th√¥ng tin th√†nh c√¥ng!");
      // TODO: ƒê√≥ng modal ho·∫∑c redirect
    } catch (err) {
      toast.error("L∆∞u th√¥ng tin th·∫•t b·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  const handleFacebookSuccess = async (res) => {
    try {
      setLoading(true);
      // G·ª≠i accessToken l√™n backend ƒë·ªÉ x√°c th·ª±c ho·∫∑c l·∫•y th√¥ng tin user
      const response = await api.post("/auth/facebook", {
        accessToken: res.accessToken,
      });
      dispatch(login(response.data.user));
      console.log("Facebook response:", response.data);

      if (response.data.user && response.data.jwt) {
        toast.success("ƒêƒÉng nh·∫≠p Facebook th√†nh c√¥ng!");
        // TODO: ƒê√≥ng modal ho·∫∑c redirect, v√≠ d·ª•:
        window.location.href = "/";
      } else {
        toast.error("ƒêƒÉng nh·∫≠p Facebook th·∫•t b·∫°i!");
      }
    } catch (err) {
      toast.error("L·ªói x√°c th·ª±c Facebook!");
      console.log(err.toast);
    } finally {
      setLoading(false);
    }
  };

  // X·ª≠ l√Ω ƒëƒÉng nh·∫≠p Google th√†nh c√¥ng
  const handleGoogleSuccess = async (credentialResponse) => {
    console.log(credentialResponse);
    try {
      setLoading(true);
      console.log("Google login successful");

      const { credential } = credentialResponse;
      // G·ª≠i idToken l√™n backend ƒë·ªÉ x√°c th·ª±c ho·∫∑c l·∫•y th√¥ng tin user
      const res = await api.post(
        "/auth/google",
        {
          accessToken: credential,
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      console.log("Google response:", res.data.user);
      console.log("Google response:", res.data.token);
      dispatch(login(res.data.user));
      if (res.data && res.data.jwt) {
        localStorage.setItem("token", res.data.token);
        window.location.href = "/";

        toast.success("ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng!");
        // TODO: ƒê√≥ng modal ho·∫∑c redirect, v√≠ d·ª•:
      } else {
        toast.error("ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i!");
      }
    } catch (error) {
      toast.error("L·ªói x√°c th·ª±c Google!");
      console.log(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: 24, minWidth: 340, justifyContent: "center" }}>
      {step === 1 && (
        <Form form={form} layout="vertical" onFinish={handleLogin}>
          <h2 style={{ marginBottom: 8 }}>ƒêƒÉng nh·∫≠p</h2>
          <p style={{ color: "#666", marginBottom: 24 }}>
            D√πng email ƒë·ªÉ ti·∫øp t·ª•c
          </p>
          <Form.Item
            name="email"
            label="Email"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p email!" },
              { type: "email", message: "Email kh√¥ng h·ª£p l·ªá!" },
            ]}
          >
            <Input placeholder="Nh·∫≠p email" size="large" />
          </Form.Item>
          <Form.Item
            name="password"
            label="M·∫≠t kh·∫©u"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!" }]}
          >
            <Input.Password placeholder="Nh·∫≠p m·∫≠t kh·∫©u" size="large" />
          </Form.Item>
          <div style={{ display: "flex", justifyContent: "space-between" }}>
            <span>Qu√™n m·∫≠t kh·∫©u?</span>
            <a href="#">L·∫•y l·∫°i m·∫≠t kh·∫©u</a>
          </div>
          <Form.Item style={{ marginTop: 16 }}>
            <GradientButton htmlType="submit" block loading={loading}>
              ƒêƒÉng nh·∫≠p
            </GradientButton>
          </Form.Item>
        </Form>
      )}

      {/* Step 2: Khai b√°o th√¥ng tin c√° nh√¢n */}
      {step === 2 && (
        <Spin spinning={loading}>
          <div>
            <h2>Khai b√°o th√¥ng tin c√° nh√¢n</h2>
            <p style={{ color: "#666", marginBottom: 24 }}>
              Vui l√≤ng cung c·∫•p th√¥ng tin ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng nh·∫≠p.
            </p>
            <Form
              form={profileForm}
              layout="vertical"
              onFinish={handleFinishProfile}
              autoComplete="off"
            >
              <Form.Item
                name="fullname"
                label="T√™n"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n!" }]}
              >
                <Input placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n" />
              </Form.Item>
              <Form.Item
                name="gender"
                label="Gi·ªõi t√≠nh"
                rules={[
                  { required: true, message: "Vui l√≤ng ch·ªçn gi·ªõi t√≠nh!" },
                ]}
              >
                <Select placeholder="Ch·ªçn gi·ªõi t√≠nh">
                  <Option value="FEMALE">
                    <span role="img" aria-label="N·ªØ">
                      üë©‚Äçü¶∞
                    </span>{" "}
                    N·ªØ
                  </Option>
                  <Option value="MALE">
                    <span role="img" aria-label="Nam">
                      üë®‚Äçü¶±
                    </span>{" "}
                    Nam
                  </Option>
                </Select>
              </Form.Item>
              <Form.Item
                name="dob"
                label="Ng√†y sinh"
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p ng√†y sinh!" },
                ]}
              >
                <DatePicker
                  style={{ width: "100%" }}
                  format="DD/MM/YYYY"
                  placeholder="Nh·∫≠p ng√†y sinh c·ªßa b·∫°n"
                />
              </Form.Item>
              <Form.Item>
                <GradientButton htmlType="submit" block>
                  L∆∞u
                </GradientButton>
              </Form.Item>
            </Form>
            <div style={{ textAlign: "center", marginTop: 16 }}>
              <Button
                type="link"
                onClick={() => {
                  message.info("B·∫°n ƒë√£ b·ªè qua khai b√°o th√¥ng tin c√° nh√¢n.");
                  // TODO: ƒê√≥ng modal ho·∫∑c redirect
                }}
              >
                Thi·∫øt l·∫≠p sau
              </Button>
            </div>
          </div>
        </Spin>
      )}

      {step === 1 && (
        <div style={{ margin: "32px 0 0" }}>
          <div style={{ textAlign: "center", color: "#bbb", marginBottom: 16 }}>
            Ho·∫∑c ti·∫øp t·ª•c b·∫±ng
          </div>
          <div style={{ display: "flex", gap: 12, justifyContent: "center" }}>
            <LoginGoogle onSuccess={handleGoogleSuccess} />
            <LoginFace onSuccess={handleFacebookSuccess} />
          </div>
          <div style={{ fontSize: 12, color: "#888", marginTop: 20 }}>
            B·∫±ng c√°ch ƒëƒÉng k√Ω, b·∫°n ƒë·ªìng √Ω v·ªõi{" "}
            <a href="#" style={{ color: "#3870ff" }}>
              Ch√≠nh s√°ch b·∫£o m·∫≠t
            </a>{" "}
            v√†{" "}
            <a href="#" style={{ color: "#3870ff" }}>
              ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng
            </a>
            .
          </div>
        </div>
      )}
    </div>
  );
};

export default LoginForm;
