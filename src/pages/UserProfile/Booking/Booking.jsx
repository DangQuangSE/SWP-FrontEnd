// pages/UserProfile/Booking.jsx
import React, { useEffect, useState, useCallback, useRef } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { useSelector } from "react-redux";
import { message, Modal, Alert, Button } from "antd";
import api from "../../../configs/api";
import "./Booking.css";
import RatingModal from '../../../components/RatingModal';
const TABS = [
  { key: "upcoming", label: "L·ªãch h·∫πn s·∫Øp ƒë·∫øn" },
  { key: "completed", label: "Ho√†n th√†nh" },
  { key: "history", label: "L·ªãch s·ª≠ ƒë·∫∑t ch·ªó" },
  { key: "combo", label: "G√≥i kh√°m" },
];

// API status mapping
const STATUS_MAP = {
  upcoming: ["CONFIRMED", "PENDING", "CHECKED"],
  completed: ["COMPLETED"],
  history: ["CANCELED"],
};

// Status display mapping (Vietnamese)
const STATUS_DISPLAY = {
  CONFIRMED: "ƒê√£ x√°c nh·∫≠n",
  PENDING: "Ch·ªù x√°c nh·∫≠n",
  CHECKED: "ƒê√£ check in",
  COMPLETED: "Ho√†n th√†nh",
  CANCELED: "ƒê√£ h·ªßy",
};
const Booking = () => {
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("upcoming");
  const [zoomUrls, setZoomUrls] = useState({}); // Cache Zoom URLs by appointment ID
  const [blinkingButtons, setBlinkingButtons] = useState({}); // Track which buttons are blinking
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedAppointment, setSelectedAppointment] = useState(null);
  const [ratingModalVisible, setRatingModalVisible] = useState(false);
  const [appointmentToRate, setAppointmentToRate] = useState(null);
  const [previousRating, setPreviousRating] = useState(null);

  const navigate = useNavigate();
  const { search } = useLocation();
  const token =
    useSelector((state) => state.user.token) || localStorage.getItem("token");

  // Track if payment success message has been shown
  const paymentMessageShown = useRef(false);

  // Function to verify VNPay payment with backend
  const verifyVNPayPayment = useCallback(async (urlParams) => {
    try {
      console.log(" Verifying VNPay payment with backend...");

      // G·ªçi API backend ƒë·ªÉ verify payment
      const response = await api.get("/payment/vnpay/vnpay-return", {
        params: Object.fromEntries(urlParams.entries()),
      });

      console.log(" VNPay verification response:", response.data);
    } catch (error) {
      console.error(" Error verifying VNPay payment:", error);
      message.error("C√≥ l·ªói khi x√°c th·ª±c thanh to√°n v·ªõi server.");
    }
  }, []);

  // Function to get and cache Zoom URL
  const getZoomUrl = useCallback(async (appointmentId) => {
    try {
      console.log(" Getting Zoom URL for appointment:", appointmentId);

      const response = await api.get(
        `/zoom/test-create-meeting?appointmentId=${appointmentId}`
      );
      const meetingData = response.data;

      console.log(" Zoom meeting data:", meetingData);

      if (meetingData.join_url) {
        // Cache the URL
        setZoomUrls((prev) => ({
          ...prev,
          [appointmentId]: meetingData.join_url,
        }));
        return meetingData.join_url;
      }
      return null;
    } catch (error) {
      console.error(" Error getting Zoom URL:", error);
      return null;
    }
  }, []);

  // Function to join Zoom meeting
  const joinZoomMeeting = useCallback(
    async (appointment) => {
      // Check if URL is already cached
      let joinUrl = zoomUrls[appointment.id];

      if (!joinUrl) {
        // Show loading and fetch URL
        message.loading("ƒêang k·∫øt n·ªëi ph√≤ng t∆∞ v·∫•n...", 0.5);
        joinUrl = await getZoomUrl(appointment.id);
        message.destroy();
      }

      if (joinUrl) {
        window.open(joinUrl, "_blank");
        message.success("ƒê√£ m·ªü ph√≤ng t∆∞ v·∫•n online!", 1);

        // Start blinking animation
        setBlinkingButtons((prev) => ({
          ...prev,
          [appointment.id]: true,
        }));

        // Stop blinking after 3 seconds
        setTimeout(() => {
          setBlinkingButtons((prev) => ({
            ...prev,
            [appointment.id]: false,
          }));
        }, 3000);
      } else {
        message.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ph√≤ng t∆∞ v·∫•n. Vui l√≤ng th·ª≠ l·∫°i!");
      }
    },
    [zoomUrls, getZoomUrl]
  );

  // Fetch appointments based on active tab
  const fetchAppointments = useCallback(async () => {
    if (!token) {
      console.warn("Kh√¥ng c√≥ token ƒë·ªÉ g·ªçi API!");
      return;
    }

    setLoading(true);
    try {
      const statuses = STATUS_MAP[activeTab];
      let data = [];

      if (activeTab === "upcoming") {
        // Fetch multiple statuses for upcoming
        const requests = statuses.map((status) =>
          api.get(`/appointment/by-status?status=${status}`)
        );
        const responses = await Promise.all(requests);
        data = responses.flatMap((res) => res.data);
      } else {
        // Fetch single status for other tabs
        const res = await api.get(
          `/appointment/by-status?status=${statuses[0]}`
        );
        data = res.data;
      }

      data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
      setAppointments(data);
    } catch (err) {
      console.error("L·ªói khi l·∫•y l·ªãch h·∫πn:", err.response?.data || err.message);
      setAppointments([]);
    } finally {
      setLoading(false);
    }
  }, [activeTab, token]);

  useEffect(() => {
    fetchAppointments();
  }, [fetchAppointments]);

  // Function to create Zoom meeting if service type is CONSULTING_ON
  const createZoomMeetingIfNeeded = useCallback(
    async (appointmentId) => {
      try {
        console.log(
          "üîç Checking if need to create Zoom meeting for appointment:",
          appointmentId
        );

        // L·∫•y th√¥ng tin appointment ƒë·ªÉ ki·ªÉm tra service type
        const appointmentResponse = await api.get(
          `/appointment/${appointmentId}`
        );
        const appointment = appointmentResponse.data;

        console.log("üìã Appointment details:", appointment);

        // Ki·ªÉm tra n·∫øu l√† d·ªãch v·ª• CONSULTING_ON
        if (
          appointment.appointmentDetails &&
          appointment.appointmentDetails.length > 0
        ) {
          const hasConsultingOnService = appointment.appointmentDetails.some(
            (detail) => detail.serviceType === "CONSULTING_ON"
          );

          if (hasConsultingOnService) {
            console.log(
              "üé• Creating Zoom meeting for CONSULTING_ON service..."
            );

            // G·ªçi API t·∫°o Zoom meeting
            const zoomResponse = await api.get(
              `/zoom/test-create-meeting?appointmentId=${appointmentId}`
            );
            console.log("üìπ Zoom meeting created:", zoomResponse.data);

            // Refresh appointments ƒë·ªÉ l·∫•y join_url m·ªõi
            setTimeout(() => {
              fetchAppointments();
            }, 1000);

            message.success("ƒê√£ t·∫°o ph√≤ng t∆∞ v·∫•n online!");
          }
        }
      } catch (error) {
        console.error("‚ùå Error creating Zoom meeting:", error);
        // Kh√¥ng hi·ªÉn th·ªã error message ƒë·ªÉ kh√¥ng l√†m phi·ªÅn user
      }
    },
    [fetchAppointments]
  );

  const handleCancelAppointment = async (appointmentId) => {
    if (!window.confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën h·ªßy l·ªãch h·∫πn n√†y?")) return;

    try {
      await api.delete(`/appointment/${appointmentId}/cancel`);
      message.success("H·ªßy l·ªãch h·∫πn th√†nh c√¥ng");

      // L√†m m·ªõi l·∫°i danh s√°ch sau khi h·ªßy
      setAppointments((prev) =>
        prev.filter((appointment) => appointment.id !== appointmentId)
      );
    } catch (err) {
      console.error("L·ªói khi h·ªßy l·ªãch h·∫πn:", err.response?.data || err.message);

      // Handle specific error cases
      if (err.response?.status === 500) {
        message.error(
          "L·ªói h·ªá th·ªëng: Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn n√†y. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£."
        );
      } else if (err.response?.status === 404) {
        message.error("L·ªãch h·∫πn kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c h·ªßy.");
        // Remove from UI if appointment doesn't exist
        setAppointments((prev) =>
          prev.filter((apt) => apt.id !== appointmentId)
        );
      } else if (err.response?.status === 400) {
        message.error(
          "Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn n√†y. L·ªãch h·∫πn c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n ho·∫∑c ƒë√£ di·ªÖn ra."
        );
      } else {
        message.error("Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn. Vui l√≤ng th·ª≠ l·∫°i sau.");
      }
    }
  };

  const handleViewDetail = (appointment) => {
    setSelectedAppointment(appointment);
    setModalVisible(true);
  };

  // Handle VNPay payment result from URL params - only run once per URL change
  useEffect(() => {
    const query = new URLSearchParams(search);
    const vnpResponseCode = query.get("vnp_ResponseCode");
    const vnpTransactionStatus = query.get("vnp_TransactionStatus");
    const vnpTxnRef = query.get("vnp_TxnRef");

    // Check for VNPay return parameters
    if (vnpResponseCode && !paymentMessageShown.current) {
      console.log(" VNPay Return in Booking page:", {
        vnpResponseCode,
        vnpTransactionStatus,
        vnpTxnRef,
        fullURL: search,
      });

      // L·∫•y appointmentId t·ª´ localStorage TR∆Ø·ªöC KHI x√≥a
      const pendingBooking = JSON.parse(
        localStorage.getItem("pendingBooking") || "{}"
      );
      const appointmentId = pendingBooking.appointmentId;

      localStorage.removeItem("pendingBooking");
      paymentMessageShown.current = true; // Mark message as shown

      if (vnpResponseCode === "00" && vnpTransactionStatus === "00") {
        // Thanh to√°n VNPay th√†nh c√¥ng
        message.success("Thanh to√°n th√†nh c√¥ng! L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.");

        // G·ªçi API ƒë·ªÉ verify payment v·ªõi backend
        verifyVNPayPayment(query);

        // T·∫°o Zoom meeting n·∫øu l√† d·ªãch v·ª• CONSULTING_ON
        if (appointmentId) {
          createZoomMeetingIfNeeded(appointmentId);
        }
      } else if (vnpResponseCode === "24") {
        // Ng∆∞·ªùi d√πng h·ªßy thanh to√°n - cancel cu·ªôc h·∫πn
        message.warning("Thanh to√°n ƒë√£ b·ªã h·ªßy. ƒêang h·ªßy l·ªãch h·∫πn...");

        console.log(" Debug info:", {
          appointmentId,
          vnpTxnRef,
          pendingBooking,
        });

        // T·∫°o async function ƒë·ªÉ handle cancel
        const cancelAppointmentDueToPayment = async () => {
          try {
            let targetAppointmentId = appointmentId;

            // N·∫øu kh√¥ng c√≥ appointmentId t·ª´ localStorage, th·ª≠ l·∫•y t·ª´ backend
            if (!targetAppointmentId) {
              console.log(
                " No appointmentId in localStorage, trying to find by vnpTxnRef:",
                vnpTxnRef
              );

              // G·ªçi API ƒë·ªÉ t√¨m appointment b·∫±ng vnpTxnRef
              try {
                const response = await api.get(
                  `/appointment/by-transaction/${vnpTxnRef}`
                );
                targetAppointmentId =
                  response.data.appointmentId || response.data.id;
                console.log(
                  " Found appointmentId from backend:",
                  targetAppointmentId
                );
              } catch (findError) {
                console.error(
                  "Error finding appointment by transaction:",
                  findError
                );

                // Fallback: L·∫•y appointments g·∫ßn ƒë√¢y v√† t√¨m appointment PENDING
                try {
                  const recentResponse = await api.get(
                    "/appointment/by-status?status=PENDING"
                  );
                  const recentAppointments = recentResponse.data;

                  // L·∫•y appointment PENDING m·ªõi nh·∫•t (c√≥ th·ªÉ l√† appointment v·ª´a t·∫°o)
                  if (recentAppointments && recentAppointments.length > 0) {
                    const latestPending = recentAppointments.sort(
                      (a, b) => new Date(b.created_at) - new Date(a.created_at)
                    )[0];
                    targetAppointmentId = latestPending.id;
                    console.log(
                      " Using latest PENDING appointment:",
                      targetAppointmentId
                    );
                  }
                } catch (fallbackError) {
                  console.error("Fallback method also failed:", fallbackError);
                }
              }
            }

            if (targetAppointmentId) {
              await api.delete(`/appointment/${targetAppointmentId}/cancel`);
              message.success("L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy do thanh to√°n b·ªã h·ªßy.");
            } else {
              console.error("No appointmentId found to cancel");
              message.error(
                "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn ƒë·ªÉ h·ªßy. Vui l√≤ng ki·ªÉm tra l·∫°i trong danh s√°ch l·ªãch h·∫πn."
              );
            }
          } catch (error) {
            console.error("Error canceling appointment:", error);
            message.error(
              "Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn t·ª± ƒë·ªông. Vui l√≤ng h·ªßy th·ªß c√¥ng trong danh s√°ch l·ªãch h·∫πn."
            );
          }
        };

        // G·ªçi function cancel
        cancelAppointmentDueToPayment();
      } else {
        // Thanh to√°n VNPay th·∫•t b·∫°i
        message.error("Thanh to√°n th·∫•t b·∫°i ho·∫∑c ƒë√£ b·ªã h·ªßy.");
      }

      // Clean URL sau khi x·ª≠ l√Ω
      window.history.replaceState({}, document.title, "/user/booking");

      // Refresh appointments after a short delay to ensure payment is processed
      const refreshAppointments = () => {
        if (token) {
          fetchAppointments();
        }
      };
      setTimeout(refreshAppointments, 500);
      return;
    }
  }, [
    search,
    verifyVNPayPayment,
    fetchAppointments,
    token,
    createZoomMeetingIfNeeded,
  ]);

  // Th√™m useEffect ƒë·ªÉ ki·ªÉm tra c√°c cu·ªôc h·∫πn c·∫ßn ƒë√°nh gi√° khi component mount
  useEffect(() => {
    const checkForPendingRatings = () => {
      // L·ªçc c√°c cu·ªôc h·∫πn ƒë√£ ho√†n th√†nh nh∆∞ng ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√°
      const needRatingAppointments = appointments.filter(
        app => app.status === "COMPLETED" && !app.isRated
      );

      if (needRatingAppointments.length > 0 && activeTab === "completed") {
        // Hi·ªÉn th·ªã banner th√¥ng b√°o
        message.info("B·∫°n c√≥ cu·ªôc h·∫πn c·∫ßn ƒë√°nh gi√°. H√£y ƒë√°nh gi√° ƒë·ªÉ gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán d·ªãch v·ª•!", 5);
      }
    };

    if (appointments.length > 0) {
      checkForPendingRatings();
    }
  }, [appointments, activeTab]);

  // Th√™m h√†m ƒë·ªÉ ki·ªÉm tra xem m·ªôt cu·ªôc h·∫πn c√≥ th·ªÉ ƒë√°nh gi√° kh√¥ng
  const canRateAppointment = (appointment) => {
    return appointment.status === "COMPLETED" && !appointment.isRated;
  };

  // Th√™m h√†m x·ª≠ l√Ω ƒë√°nh gi√°
  const handleSubmitRating = async (values) => {
    try {
      message.loading({ content: "ƒêang g·ª≠i ƒë√°nh gi√°...", key: "submitRating" });

      if (appointmentToRate.isRated && previousRating) {
        // C·∫≠p nh·∫≠t ƒë√°nh gi√° c≈©

        // 1. C·∫≠p nh·∫≠t ƒë√°nh gi√° d·ªãch v·ª•
        const serviceFeedbackRequest = {
          rating: values.serviceRating,
          comment: values.serviceComment || ""
        };

        await api.put(`/feedback/${previousRating.serviceFeedback.id}`, serviceFeedbackRequest);

        // 2. C·∫≠p nh·∫≠t ƒë√°nh gi√° b√°c sƒ©
        const consultantFeedbackRequest = {
          rating: values.consultantRating,
          consultantId: appointmentToRate.doctorId, // S·ª≠ d·ª•ng doctorId t·ª´ appointment n·∫øu c√≥
          comment: values.consultantComment || ""
        };

        console.log("Consultant feedback request:", consultantFeedbackRequest);


        if (previousRating.consultantFeedback && previousRating.consultantFeedback.id) {
          await api.put(`/consultant-feedbacks/${previousRating.consultantFeedback.id}`, consultantFeedbackRequest);
        }

        message.success({ content: 'ƒê√£ c·∫≠p nh·∫≠t ƒë√°nh gi√° th√†nh c√¥ng!', key: "submitRating" });
      } else {
        // T·∫°o ƒë√°nh gi√° m·ªõi (gi·ªØ nguy√™n code c≈©)
        // 1. ƒê·∫ßu ti√™n, g·ª≠i ƒë√°nh gi√° d·ªãch v·ª•
        const serviceFeedbackRequest = {
          appointmentId: appointmentToRate.id,
          rating: values.serviceRating,
          comment: values.serviceComment || ""
        };

        // G·ª≠i ƒë√°nh gi√° d·ªãch v·ª• v√† l·∫•y response
        const serviceResponse = await api.post('/feedback', serviceFeedbackRequest);
        console.log("Service feedback response:", serviceResponse.data);

        // L·∫•y serviceFeedbackId t·ª´ response
        const serviceFeedbackId = serviceResponse.data.id;

        if (!serviceFeedbackId) {
          throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ID ƒë√°nh gi√° d·ªãch v·ª• t·ª´ server");
        }

        // 2. Sau ƒë√≥, g·ª≠i ƒë√°nh gi√° b√°c sƒ© v·ªõi serviceFeedbackId
        const consultantFeedbackRequest = {
          serviceFeedbackId: serviceFeedbackId,
          consultantId: appointmentToRate.doctorId || 2, // S·ª≠ d·ª•ng doctorId t·ª´ appointment n·∫øu c√≥
          rating: values.consultantRating,
          comment: values.consultantComment || ""
        };

        await api.post('/consultant-feedbacks', consultantFeedbackRequest);

        // 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ ƒë√°nh gi√° cho appointment
        await api.put(`/appointment/${appointmentToRate.id}/rate`, {
          isRated: true
        });

        message.success({ content: 'C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°!', key: "submitRating" });
      }

      setRatingModalVisible(false);
      setTimeout(() => setPreviousRating(null), 300);

      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch cu·ªôc h·∫πn
      fetchAppointments();
    } catch (error) {
      console.error('Error submitting ratings:', error);
      message.error({
        content: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°: ' + (error.response?.data?.message || error.message),
        key: "submitRating"
      });
    }
  };

  // C·∫≠p nh·∫≠t h√†m fetch ƒë√°nh gi√° c≈© ƒë·ªÉ ph√π h·ª£p v·ªõi API
  const fetchPreviousRating = async (appointmentId) => {
    try {
      message.loading({ content: "ƒêang t·∫£i ƒë√°nh gi√°...", key: "ratingLoading" });
      console.log("Fetching previous rating for appointment:", appointmentId);

      // B∆∞·ªõc 1: L·∫•y service feedback d·ª±a tr√™n appointment ID
      const serviceFeedbackResponse = await api.get(`/feedback/appointment/${appointmentId}`);
      console.log("Service feedback data:", serviceFeedbackResponse.data);

      if (!serviceFeedbackResponse.data || serviceFeedbackResponse.data.length === 0) {
        throw new Error("Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√° d·ªãch v·ª•");
      }

      // L·∫•y service feedback ƒë·∫ßu ti√™n (ho·∫∑c duy nh·∫•t)
      const serviceFeedback = Array.isArray(serviceFeedbackResponse.data)
        ? serviceFeedbackResponse.data[0]
        : serviceFeedbackResponse.data;

      // B∆∞·ªõc 2: L·∫•y consultant feedback d·ª±a tr√™n service feedback ID
      const consultantFeedbackResponse = await api.get(`/consultant-feedbacks/service-feedback/${serviceFeedback.id}`);
      console.log("Consultant feedback data:", consultantFeedbackResponse.data);

      // T·∫°o ƒë·ªëi t∆∞·ª£ng previousRating v·ªõi c·∫•u tr√∫c ph√π h·ª£p
      const previousRating = {
        serviceFeedback: serviceFeedback,
        consultantFeedback: Array.isArray(consultantFeedbackResponse.data) && consultantFeedbackResponse.data.length > 0
          ? consultantFeedbackResponse.data[0]
          : null
      };

      console.log("Combined previous rating:", previousRating);

      // L∆∞u ƒë√°nh gi√° c≈© v√†o state
      setPreviousRating(previousRating);

      message.success({ content: "ƒê√£ t·∫£i ƒë√°nh gi√° c≈©", key: "ratingLoading", duration: 1 });
      setRatingModalVisible(true);
    } catch (error) {
      console.error('Error fetching previous rating:', error);
      message.error({
        content: 'Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√° c≈©: ' + (error.response?.data?.message || error.message),
        key: "ratingLoading",
        duration: 3
      });

      setPreviousRating(null);
      setRatingModalVisible(true);
    }
  };

  // Th√™m useEffect ƒë·ªÉ debug khi previousRating thay ƒë·ªïi
  useEffect(() => {
    if (previousRating) {
      console.log("Previous rating updated in Booking component:", previousRating);
    }
  }, [previousRating]);

  const renderAppointments = () => {
    if (loading) {
      return (
        <div className="booking-loading-profile">ƒêang t·∫£i l·ªãch h·∫πn...</div>
      );
    }

    if (!appointments?.length) {
      const currentTab = TABS.find((t) => t.key === activeTab);

      return (
        <div className="booking-empty-profile">
          <h3>Kh√¥ng c√≥ {currentTab?.label.toLowerCase()}</h3>
          <p>ƒê·ª´ng lo l·∫Øng. B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch khi c·∫ßn</p>
          <button onClick={() => navigate("/services")}>
            ƒêƒÉng k√≠ kh√°m b·ªánh
          </button>
        </div>
      );
    }

    return appointments.map((appointment) => (
      <div className="booking-card-profile" key={appointment.id}>
        <h2>Th√¥ng tin l·ªãch h·∫πn</h2>
        <div className="booking-info-profile">
          <p>
            <strong>Ng√†y h·∫πn:</strong> {appointment.preferredDate}
          </p>
          <p>
            <strong>D·ªãch v·ª•:</strong> {appointment.serviceName}
          </p>
          <p>
            <strong>Tr·∫°ng th√°i:</strong>{" "}
            <span className={`status ${appointment.status.toLowerCase()}`}>
              {STATUS_DISPLAY[appointment.status] || appointment.status}
            </span>
          </p>
          <p>
            <strong>Ghi ch√∫:</strong> {appointment.note || "Kh√¥ng c√≥"}
          </p>
          <p>
            <strong>Gi√°:</strong> {appointment.price?.toLocaleString()} VND
          </p>
          <p>
            <strong>Th·ªùi gian t·∫°o:</strong>{" "}
            {new Date(appointment.created_at).toLocaleString()}
          </p>
          <div className="appointment-actions">
            <button
              className="detail-button-profile"
              onClick={() => handleViewDetail(appointment)}
            >
              Xem chi ti·∫øt
            </button>

            {["CONFIRMED", "PENDING", "CHECKED"].includes(
              appointment.status
            ) && (
                <button
                  className="cancel-button-profile"
                  onClick={() => handleCancelAppointment(appointment.id)}
                >
                  H·ªßy l·ªãch h·∫πn
                </button>
              )}

            {/* Zoom consultation button for CONSULTING_ON services with CONFIRMED status */}
            {(() => {
              // Debug log to check appointment structure
              console.log("üîç [DEBUG] Appointment structure:", {
                id: appointment.id,
                serviceType: appointment.serviceType,
                type: appointment.type,
                serviceName: appointment.serviceName,
                status: appointment.status,
                appointmentDetails: appointment.appointmentDetails,
              });

              // Check for CONSULTING_ON service type in appointmentDetails array
              const isConsultingOnline =
                appointment.appointmentDetails?.some((detail) => {
                  console.log("üîç [DEBUG] Checking detail:", detail);
                  console.log(
                    "üîç [DEBUG] Detail serviceType:",
                    detail.serviceType
                  );
                  return detail.serviceType === "CONSULTING_ON";
                }) || false;

              const isConfirmed = appointment.status === "CONFIRMED";

              console.log("üéØ [DEBUG] isConsultingOnline:", isConsultingOnline);
              console.log("üéØ [DEBUG] isConfirmed:", isConfirmed);

              return isConsultingOnline && isConfirmed;
            })() && (
                <button
                  className={`zoom-button-profile ${blinkingButtons[appointment.id] ? "blinking" : ""
                    }`}
                  onClick={() => joinZoomMeeting(appointment)}
                  title={
                    zoomUrls[appointment.id]
                      ? "Click ƒë·ªÉ tham gia ngay"
                      : "Click ƒë·ªÉ k·∫øt n·ªëi ph√≤ng t∆∞ v·∫•n"
                  }
                >
                  {zoomUrls[appointment.id] ? "Tham gia ngay" : "T∆∞ v·∫•n Online"}
                </button>
              )}

            {/* Thay ƒë·ªïi n√∫t ƒë√°nh gi√° ƒë·ªÉ hi·ªÉn th·ªã "S·ª≠a ƒë√°nh gi√°" n·∫øu ƒë√£ ƒë√°nh gi√° */}
            {appointment.status === "COMPLETED" && (
              <button
                className="rate-button"
                onClick={() => {
                  setAppointmentToRate(appointment);

                  console.log("Rating button clicked for appointment:", appointment.id, "isRated:", appointment.isRated);

                  // N·∫øu ƒë√£ ƒë√°nh gi√°, fetch d·ªØ li·ªáu ƒë√°nh gi√° c≈© tr∆∞·ªõc
                  if (appointment.isRated === true || appointment.isRated === 1) {
                    fetchPreviousRating(appointment.id);
                  } else {
                    // N·∫øu ch∆∞a ƒë√°nh gi√°, m·ªü modal lu√¥n
                    setPreviousRating(null);
                    setRatingModalVisible(true);
                  }
                }}
              >
                {appointment.isRated === true || appointment.isRated === 1 ? "S·ª≠a ƒë√°nh gi√°" : "ƒê√°nh gi√° d·ªãch v·ª•"}
              </button>
            )}

            {/* X√≥a badge "ƒê√£ ƒë√°nh gi√°" v√¨ ƒë√£ thay th·∫ø b·∫±ng n√∫t "S·ª≠a ƒë√°nh gi√°" */}
          </div>
        </div>
      </div>
    ));
  };
  const renderTabContent = () => renderAppointments();

  return (
    <div className="booking-container">
      <h2 className="booking-title-profile">L·ªãch s·ª≠ ƒë·∫∑t ch·ªó</h2>

      <div className="booking-tabs-profile">
        {TABS.map((tab) => (
          <button
            key={tab.key}
            className={`tab-button-profile ${activeTab === tab.key ? "active" : ""
              }`}
            onClick={() => setActiveTab(tab.key)}
          >
            {tab.label}
          </button>
        ))}
      </div>

      <div className="booking-tab-content-profile">{renderTabContent()}</div>

      {/* Modal hi·ªÉn th·ªã chi ti·∫øt l·ªãch h·∫πn */}
      <Modal
        title="Chi ti·∫øt l·ªãch h·∫πn"
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
        width={600}
        className="appointment-detail-modal"
      >
        {selectedAppointment && (
          <div className="appointment-detail-content">
            {(() => {
              const detail = selectedAppointment.appointmentDetails?.[0];
              return (
                <div className="detail-sections">
                  {/* Th√¥ng tin ch√≠nh */}
                  <div className="detail-section">
                    <h3 className="section-title">Th√¥ng tin l·ªãch h·∫πn</h3>
                    <div className="detail-item">
                      <span className="detail-label">ID:</span>
                      <span className="detail-value">
                        {selectedAppointment.id}
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">Kh√°ch h√†ng:</span>
                      <span className="detail-value">
                        {selectedAppointment.customerName || "Kh√¥ng c√≥ t√™n"}
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">D·ªãch v·ª•:</span>
                      <span className="detail-value">
                        {selectedAppointment.serviceName}
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">B√°c sƒ© ph·ª• tr√°ch:</span>
                      <span className="detail-value">
                        {detail?.consultantName || "Ch∆∞a ph√¢n c√¥ng"}
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">Ng√†y h·∫πn:</span>
                      <span className="detail-value">
                        {selectedAppointment.preferredDate || "Kh√¥ng c√≥"}
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">Th·ªùi gian h·∫πn:</span>
                      <span className="detail-value">
                        {detail?.slotTime
                          ? new Date(detail.slotTime).toLocaleString("vi-VN")
                          : "Kh√¥ng c√≥"}
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">Tr·∫°ng th√°i:</span>
                      <span
                        className={`detail-value status-${selectedAppointment.status?.toLowerCase()}`}
                      >
                        {STATUS_DISPLAY[selectedAppointment.status] ||
                          selectedAppointment.status ||
                          "Kh√¥ng x√°c ƒë·ªãnh"}
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">Gi√°:</span>
                      <span className="detail-value price">
                        {selectedAppointment.price
                          ? selectedAppointment.price.toLocaleString() + " VND"
                          : "Kh√¥ng c√≥"}
                      </span>
                    </div>
                  </div>

                  {/* Th√¥ng tin thanh to√°n */}
                  {/* <div className="detail-section">
                    <h3 className="section-title">Th√¥ng tin thanh to√°n</h3>

                    <div className="detail-item">
                      <span className="detail-label">
                        Tr·∫°ng th√°i thanh to√°n:
                      </span>
                      <span className="detail-value">
                        {selectedAppointment.paymentStatus || "Ch∆∞a thanh to√°n"}
                      </span>
                    </div>
                    <div className="detail-item">
                      <span className="detail-label">ƒê√£ thanh to√°n:</span>
                      <span className="detail-value">
                        {selectedAppointment.isPaid === true
                          ? "C√≥"
                          : selectedAppointment.isPaid === false
                          ? "Ch∆∞a"
                          : "Kh√¥ng x√°c ƒë·ªãnh"}
                      </span>
                    </div>
                  </div> */}

                  {/* Th√¥ng tin b·ªï sung */}
                  {/*  */}

                  {/* Th√¥ng tin b√°c sƒ© chi ti·∫øt */}
                  {detail && (
                    <div className="detail-section">
                      <h3 className="section-title">Th√¥ng tin chi ti·∫øt</h3>
                      <div className="detail-item">
                        <span className="detail-label">ID Chi ti·∫øt:</span>
                        <span className="detail-value">{detail.id}</span>
                      </div>
                      <div className="detail-item">
                        <span className="detail-label">Link tham gia:</span>
                        <span className="detail-value">
                          {detail.joinUrl || "Ch∆∞a c√≥"}
                        </span>
                      </div>
                      <div className="detail-item">
                        <span className="detail-label">K·∫øt qu·∫£ kh√°m:</span>
                        <span className="detail-value">
                          {detail.medicalResult || "Ch∆∞a c√≥"}
                        </span>
                      </div>
                    </div>
                  )}
                </div>
              );
            })()}
          </div>
        )}
      </Modal>

      {/* Th√™m banner th√¥ng b√°o cho c√°c cu·ªôc h·∫πn c·∫ßn ƒë√°nh gi√° */}
      {appointments.some(app => app.status === "COMPLETED" && !app.isRated) && (
        <div className="rating-reminder-banner">
          <Alert
            message="B·∫°n c√≥ d·ªãch v·ª• c·∫ßn ƒë√°nh gi√°"
            description="H√£y ƒë√°nh gi√° d·ªãch v·ª• ƒë·ªÉ gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng ph·ª•c v·ª•."
            type="info"
            showIcon
            action={
              <Button
                type="primary"
                onClick={() => {
                  const appToRate = appointments.find(app => app.status === "COMPLETED" && !app.isRated);
                  setAppointmentToRate(appToRate);
                  setRatingModalVisible(true);
                }}
              >
                ƒê√°nh gi√° ngay
              </Button>
            }
          />
        </div>
      )}

      {/* Modal ƒë√°nh gi√° */}
      <RatingModal
        visible={ratingModalVisible}
        appointment={appointmentToRate}
        previousRating={previousRating}
        onSubmit={handleSubmitRating}
        onCancel={() => {
          setRatingModalVisible(false);
          // Kh√¥ng reset previousRating ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh form b·ªã reset
          setTimeout(() => setPreviousRating(null), 300);
        }}
      />
    </div>
  );
};

export default Booking;
