// Test script cho button "T∆∞ v·∫•n Online" ƒë∆°n gi·∫£n v·ªõi link tr·ª±c ti·∫øp

console.log("üß™ Testing Simple Link Button Logic");
console.log("===================================");

// Test case 1: C√≥ join_url - s·∫Ω render th√†nh <a> tag
const appointmentWithJoinUrl = {
  id: 23,
  serviceType: "CONSULTING_ON",
  status: "CONFIRMED",
  appointmentDetails: [
    {
      id: 23,
      serviceType: "CONSULTING_ON",
      joinUrl: "https://zoom.us/j/123456789?pwd=abcdef", // ‚Üê C√≥ join_url
      status: "CONFIRMED"
    }
  ]
};

// Test case 2: Kh√¥ng c√≥ join_url - s·∫Ω render th√†nh <button> tag
const appointmentWithoutJoinUrl = {
  id: 24,
  serviceType: "CONSULTING_ON",
  status: "CONFIRMED",
  appointmentDetails: [
    {
      id: 24,
      serviceType: "CONSULTING_ON",
      joinUrl: null, // ‚Üê Kh√¥ng c√≥ join_url
      status: "CONFIRMED"
    }
  ]
};

// Function ƒë·ªÉ test render logic
function testRenderLogic(appointment) {
  console.log(`\n=== Testing Appointment ${appointment.id} ===`);
  
  // Logic ki·ªÉm tra hi·ªÉn th·ªã button
  const isConsultingOnline =
    appointment.serviceType === "CONSULTING_ON" ||
    appointment.appointmentDetails?.some((detail) => {
      return detail.serviceType === "CONSULTING_ON";
    }) ||
    false;

  const isConfirmed = appointment.status === "CONFIRMED";
  const shouldShowButton = isConsultingOnline && isConfirmed;

  console.log("serviceType:", appointment.serviceType);
  console.log("status:", appointment.status);
  console.log("shouldShowButton:", shouldShowButton);

  if (shouldShowButton) {
    // L·∫•y join_url t·ª´ appointmentDetails
    const joinUrl = appointment.appointmentDetails?.find(
      (detail) => detail.serviceType === "CONSULTING_ON"
    )?.joinUrl;

    console.log("joinUrl found:", !!joinUrl);
    console.log("joinUrl value:", joinUrl);
    
    if (joinUrl) {
      console.log("üîó RENDER: <a> tag");
      console.log("Element type: Link");
      console.log("href:", joinUrl);
      console.log("target: '_blank'");
      console.log("rel: 'noopener noreferrer'");
      console.log("className: 'zoom-button-profile'");
      console.log("title: 'Click ƒë·ªÉ tham gia t∆∞ v·∫•n online'");
      console.log("text: 'T∆∞ v·∫•n Online'");
      
      return {
        elementType: "link",
        href: joinUrl,
        target: "_blank",
        rel: "noopener noreferrer",
        action: "directAccess"
      };
    } else {
      console.log("üîò RENDER: <button> tag");
      console.log("Element type: Button");
      console.log("onClick: createAndOpenZoomMeeting()");
      console.log("className: 'zoom-button-profile'");
      console.log("title: 'Click ƒë·ªÉ t·∫°o ph√≤ng t∆∞ v·∫•n'");
      console.log("text: 'T∆∞ v·∫•n Online'");
      
      return {
        elementType: "button",
        onClick: "createAndOpenZoomMeeting",
        action: "createNewMeeting"
      };
    }
  } else {
    console.log("‚ùå NO RENDER: Button not shown");
    return {
      elementType: null,
      action: null
    };
  }
}

// Function ƒë·ªÉ simulate user interaction
function simulateUserInteraction(appointment) {
  const result = testRenderLogic(appointment);
  
  if (!result.elementType) {
    console.log("‚ùå No interaction - button not shown");
    return;
  }

  console.log("\nüëÜ Simulating user interaction...");
  
  if (result.elementType === "link") {
    console.log("‚úÖ User clicks LINK:");
    console.log("1. Browser navigates to:", result.href);
    console.log("2. Opens in new tab (target='_blank')");
    console.log("3. No JavaScript execution needed");
    console.log("4. Direct access to Zoom meeting");
  } else if (result.elementType === "button") {
    console.log("üîÑ User clicks BUTTON:");
    console.log("1. onClick event fires");
    console.log("2. Calls createAndOpenZoomMeeting(" + appointment.id + ")");
    console.log("3. Shows loading: 'ƒêang t·∫°o ph√≤ng t∆∞ v·∫•n...'");
    console.log("4. API call: GET /api/zoom/test-create-meeting?appointmentId=" + appointment.id);
    console.log("5. Opens join_url from response");
    console.log("6. Refreshes appointments data");
  }
}

// Function ƒë·ªÉ test HTML output
function testHTMLOutput(appointment) {
  const result = testRenderLogic(appointment);
  
  console.log("\nüìù Expected HTML Output:");
  
  if (result.elementType === "link") {
    const joinUrl = appointment.appointmentDetails?.find(
      (detail) => detail.serviceType === "CONSULTING_ON"
    )?.joinUrl;
    
    console.log(`<a
  href="${joinUrl}"
  target="_blank"
  rel="noopener noreferrer"
  className="zoom-button-profile"
  title="Click ƒë·ªÉ tham gia t∆∞ v·∫•n online"
>
  T∆∞ v·∫•n Online
</a>`);
  } else if (result.elementType === "button") {
    console.log(`<button
  className="zoom-button-profile"
  onClick={() => createAndOpenZoomMeeting(${appointment.id})}
  title="Click ƒë·ªÉ t·∫°o ph√≤ng t∆∞ v·∫•n"
>
  T∆∞ v·∫•n Online
</button>`);
  } else {
    console.log("<!-- No button rendered -->");
  }
}

// Ch·∫°y tests
console.log("\nüìä Running Tests:");

const results = [
  testRenderLogic(appointmentWithJoinUrl),
  testRenderLogic(appointmentWithoutJoinUrl)
];

console.log("\nüéØ Test Results Summary:");
console.log("Appointment 1 (has join_url):", results[0]);
console.log("Appointment 2 (no join_url):", results[1]);

console.log("\nüëÜ User Interaction Simulations:");
simulateUserInteraction(appointmentWithJoinUrl);
simulateUserInteraction(appointmentWithoutJoinUrl);

console.log("\nüìù HTML Output Tests:");
testHTMLOutput(appointmentWithJoinUrl);
testHTMLOutput(appointmentWithoutJoinUrl);

console.log("\n‚úÖ SIMPLIFIED LOGIC SUMMARY:");
console.log("1. C√≥ join_url ‚Üí Render <a> tag v·ªõi href tr·ª±c ti·∫øp");
console.log("2. Kh√¥ng c√≥ join_url ‚Üí Render <button> tag v·ªõi onClick");
console.log("3. C√πng styling CSS class: 'zoom-button-profile'");
console.log("4. C√πng text: 'T∆∞ v·∫•n Online'");
console.log("5. Link t·ª± ƒë·ªông m·ªü tab m·ªõi, button g·ªçi API t·∫°o meeting");

console.log("\nüéØ BENEFITS:");
console.log("‚úÖ ƒê∆°n gi·∫£n h∆°n - kh√¥ng c·∫ßn onClick logic ph·ª©c t·∫°p");
console.log("‚úÖ Hi·ªáu qu·∫£ h∆°n - link tr·ª±c ti·∫øp kh√¥ng c·∫ßn JavaScript");
console.log("‚úÖ T·ª± nhi√™n h∆°n - browser handle link navigation");
console.log("‚úÖ Fallback t·ªët - button cho tr∆∞·ªùng h·ª£p ch∆∞a c√≥ link");

// Export functions
window.testRenderLogic = testRenderLogic;
window.simulateUserInteraction = simulateUserInteraction;
window.testHTMLOutput = testHTMLOutput;

console.log("\nüéØ Available functions:");
console.log("- testRenderLogic(appointment)");
console.log("- simulateUserInteraction(appointment)");
console.log("- testHTMLOutput(appointment)");
