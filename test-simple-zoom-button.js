// Test script ƒë∆°n gi·∫£n cho button "T∆∞ v·∫•n Online"

console.log("üß™ Testing Simple Zoom Button Logic");
console.log("===================================");

// Test case 1: C√≥ join_url trong appointmentDetails
const appointmentWithJoinUrl = {
  id: 23,
  serviceType: "CONSULTING_ON",
  status: "CONFIRMED",
  appointmentDetails: [
    {
      id: 23,
      serviceType: "CONSULTING_ON",
      joinUrl: "https://zoom.us/j/123456789?pwd=abcdef", // ‚Üê C√≥ join_url
      status: "CONFIRMED"
    }
  ]
};

// Test case 2: Kh√¥ng c√≥ join_url
const appointmentWithoutJoinUrl = {
  id: 24,
  serviceType: "CONSULTING_ON",
  status: "CONFIRMED",
  appointmentDetails: [
    {
      id: 24,
      serviceType: "CONSULTING_ON",
      joinUrl: null, // ‚Üê Kh√¥ng c√≥ join_url
      status: "CONFIRMED"
    }
  ]
};

// Test case 3: Kh√¥ng ph·∫£i CONSULTING_ON
const appointmentNotConsulting = {
  id: 25,
  serviceType: "EXAMINATION",
  status: "CONFIRMED",
  appointmentDetails: [
    {
      id: 25,
      serviceType: "EXAMINATION",
      joinUrl: null,
      status: "CONFIRMED"
    }
  ]
};

// Function ƒë·ªÉ test button logic
function testButtonLogic(appointment) {
  console.log(`\n=== Testing Appointment ${appointment.id} ===`);
  
  // Logic ki·ªÉm tra hi·ªÉn th·ªã button
  const isConsultingOnline =
    appointment.serviceType === "CONSULTING_ON" ||
    appointment.appointmentDetails?.some((detail) => {
      return detail.serviceType === "CONSULTING_ON";
    }) ||
    false;

  const isConfirmed = appointment.status === "CONFIRMED";
  const shouldShowButton = isConsultingOnline && isConfirmed;

  console.log("serviceType:", appointment.serviceType);
  console.log("status:", appointment.status);
  console.log("shouldShowButton:", shouldShowButton);

  if (shouldShowButton) {
    // L·∫•y join_url t·ª´ appointmentDetails
    const joinUrl = appointment.appointmentDetails?.find(
      (detail) => detail.serviceType === "CONSULTING_ON"
    )?.joinUrl;

    console.log("joinUrl found:", !!joinUrl);
    console.log("joinUrl value:", joinUrl);
    console.log("buttonText: 'T∆∞ v·∫•n Online'"); // Lu√¥n hi·ªÉn th·ªã "T∆∞ v·∫•n Online"
    console.log("buttonTitle: 'Click ƒë·ªÉ tham gia t∆∞ v·∫•n online'");
    
    return {
      showButton: true,
      hasJoinUrl: !!joinUrl,
      joinUrl: joinUrl,
      action: joinUrl ? "openDirectly" : "createNewMeeting"
    };
  } else {
    console.log("Button will NOT be shown");
    return {
      showButton: false,
      hasJoinUrl: false,
      joinUrl: null,
      action: null
    };
  }
}

// Function ƒë·ªÉ simulate button click
function simulateButtonClick(appointment) {
  const result = testButtonLogic(appointment);
  
  if (!result.showButton) {
    console.log("‚ùå Button not shown - no click simulation");
    return;
  }

  console.log("\nüñ±Ô∏è Simulating button click...");
  console.log("Button text: 'T∆∞ v·∫•n Online'");
  
  if (result.hasJoinUrl) {
    console.log("‚úÖ Has join_url - Opening directly");
    console.log("Action: window.open('" + result.joinUrl + "', '_blank')");
    console.log("Message: 'ƒê√£ m·ªü ph√≤ng t∆∞ v·∫•n online!'");
    console.log("Blinking: 3 seconds");
  } else {
    console.log("üîÑ No join_url - Creating new meeting");
    console.log("Action: createAndOpenZoomMeeting(" + appointment.id + ")");
    console.log("Steps:");
    console.log("  1. Show loading: 'ƒêang t·∫°o ph√≤ng t∆∞ v·∫•n...'");
    console.log("  2. Call API: GET /api/zoom/test-create-meeting?appointmentId=" + appointment.id);
    console.log("  3. Open join_url from response");
    console.log("  4. Show success: 'ƒê√£ m·ªü ph√≤ng t∆∞ v·∫•n online!'");
    console.log("  5. Refresh appointments");
  }
}

// Ch·∫°y tests
console.log("\nüìä Running Tests:");

const results = [
  testButtonLogic(appointmentWithJoinUrl),
  testButtonLogic(appointmentWithoutJoinUrl),
  testButtonLogic(appointmentNotConsulting)
];

console.log("\nüéØ Test Results Summary:");
console.log("Appointment 1 (has join_url):", results[0]);
console.log("Appointment 2 (no join_url):", results[1]);
console.log("Appointment 3 (not consulting):", results[2]);

console.log("\nüñ±Ô∏è Button Click Simulations:");
simulateButtonClick(appointmentWithJoinUrl);
simulateButtonClick(appointmentWithoutJoinUrl);
simulateButtonClick(appointmentNotConsulting);

console.log("\n‚úÖ SIMPLIFIED LOGIC:");
console.log("1. Button always shows 'T∆∞ v·∫•n Online' (kh√¥ng thay ƒë·ªïi text)");
console.log("2. C√≥ join_url ‚Üí M·ªü tr·ª±c ti·∫øp");
console.log("3. Kh√¥ng c√≥ join_url ‚Üí T·∫°o meeting m·ªõi");
console.log("4. Kh√¥ng ph·∫£i CONSULTING_ON ‚Üí Kh√¥ng hi·ªÉn th·ªã button");

console.log("\nüéØ Expected Behavior:");
console.log("- CONSULTING_ON + CONFIRMED + c√≥ join_url ‚Üí Click m·ªü tr·ª±c ti·∫øp");
console.log("- CONSULTING_ON + CONFIRMED + kh√¥ng c√≥ join_url ‚Üí Click t·∫°o meeting m·ªõi");
console.log("- Kh√¥ng ph·∫£i CONSULTING_ON ‚Üí Kh√¥ng c√≥ button");

// Export functions
window.testButtonLogic = testButtonLogic;
window.simulateButtonClick = simulateButtonClick;

console.log("\nüéØ Available functions:");
console.log("- testButtonLogic(appointment)");
console.log("- simulateButtonClick(appointment)");
